{"ast":null,"code":"// import * as actionTypes from '../actions/type';\n\n// const initialState ={  \n//   todos:[],\n//   comletedTodos:[],\n//   DELETE_TODO:[],\n//   loading:false,\n//   error:null,};\n// export const todosReducers = (state =initialState, action) => {\n\n//     switch (action.type) {\n//         case actionTypes.ADDNEW_TODO:\n//             return [action.payload, ...state]\n//         case actionTypes.GETALL_TODO:\n//             return action.payload\n//         case actionTypes.TOGGLE_TODO:\n//             return state.map(todo => (\n//                 todo._id === action.payload._id ? { ...todo, done: !todo.done } : todo\n//             ))\n//         case actionTypes.UPDATE_TODO:\n//             return state.map(todo => (\n//                 todo && todo._id === action.payload._id ? { ...todo, data: action.payload.data } : todo\n//             ))\n//         case actionTypes.DELETE_TODO:\n//             return state.filter(todo => todo._id !== action.payload._id);\n\n//         default: \n//             return state;\n//     }\n// };\n// import * as actionTypes from '../actions/type';\n// import { FETCH_TODOS_SUCCESS } from '../actions/index';\n\n// const initialState = {\n//   todos:[],\n//   comletedTodos:[],\n//   DELETE_TODO:[],\n//   loading:false,\n//   error:null,\n// };\n// export const todosReducers = (state = initialState, action) => {\n//   switch (action.type) {\n//     case FETCH_TODOS_SUCCESS:\n//         return action.payload;\n//     case actionTypes.ADDNEW_TODO:\n//       return [action.payload, ...state];\n//     case actionTypes.GETALL_TODO:\n//       return action.payload;\n//     case actionTypes.TOGGLE_TODO:\n//       return state.map((todo) =>\n//         todo._id === action.payload._id ? { ...todo, done: !todo.done } : todo\n//       );\n//     case actionTypes.UPDATE_TODO:\n//       return state.map((todo) =>\n//         todo && todo._id === action.payload._id\n//           ? { ...todo, data: action.payload.data }\n//           : todo\n//       );\n//     case actionTypes.DELETE_TODO:\n//       return state.filter((todo) => todo._id !== action.payload._id);\n//     default:\n//       return state;\n//   }\n// };\n// redux/reducers/todosReducer.js\n// redux/reducers/todosReducer.js\n\n// import * as actionTypes from '../actions/type';\n\n// const initialState = {\n//   todos: [],\n//   completedTodos: [],\n//   deletedTodos: [],\n//   loading: false,\n//   error: null,\n// };\n\n// const todosReducer = (state = initialState, action) => {\n//   switch (action.type) {\n//     case actionTypes.FETCH_TODOS_SUCCESS:\n//       return { ...state, todos: action.payload }; // Update todos in state with fetched data\n//     case actionTypes.ADDNEW_TODO:\n//       return { ...state, todos: [action.payload, ...state.todos] }; // Add new Todo to todos array\n//     case actionTypes.GETALL_TODO:\n//       return { ...state, todos: action.payload }; // Update todos in state with fetched data\n//     case actionTypes.TOGGLE_TODO:\n//       const toggledTodoId = action.payload._id;\n//       const updatedTodos = state.todos.map((todo) =>\n//         todo._id === toggledTodoId ? { ...todo, done: !todo.done } : todo\n//       );\n//       return {\n//         ...state,\n//         todos: updatedTodos,\n//         completedTodos: updatedTodos.filter((todo) => todo.done),\n//       };\n//     case actionTypes.UPDATE_TODO:\n//       return {\n//         ...state,\n//         todos: state.todos.map((todo) =>\n//           todo._id === action.payload._id ? { ...todo, data: action.payload.data } : todo\n//         ),\n//       };\n//     case actionTypes.DELETE_TODO:\n//       const deletedTodoId = action.payload;\n//       const updatedTodosAfterDelete = state.todos.filter(\n//         (todo) => todo._id !== deletedTodoId\n//       );\n//       const deletedTodo = state.todos.find((todo) => todo._id === deletedTodoId);\n//       return {\n//         ...state,\n//         todos: updatedTodosAfterDelete,\n//         deletedTodos: [...state.deletedTodos, deletedTodo],\n//       };\n//     default:\n//       return state;\n//   }\n// };\n\n// export default todosReducer;\nimport * as actionTypes from '../actions/type';\nimport { FETCH_TODOS_SUCCESS } from '../actions/index';\nconst initialState = {\n  todos: [],\n  completedTodos: [],\n  // Corrected spelling from comletedTodos\n  deletedTodos: [],\n  // Corrected spelling from DELETE_TODO\n  loading: false,\n  error: null,\n  filter: 'all'\n};\nconst todosReducer = (state = initialState, action) => {\n  // Changed the name of the reducer to \"todosReducer\"\n  switch (action.type) {\n    case FETCH_TODOS_SUCCESS:\n      return action.payload;\n    case actionTypes.ADDNEW_TODO:\n      return [action.payload, ...state.todos];\n    // Modified to access \"state.todos\" array\n    case actionTypes.GETALL_TODO:\n      return action.payload;\n    case actionTypes.TOGGLE_TODO:\n      return state.todos.map(todo =>\n      // Modified to access \"state.todos\" array\n      todo._id === action.payload._id ? {\n        ...todo,\n        done: !todo.done\n      } : todo);\n    case actionTypes.UPDATE_TODO:\n      return state.todos.map(todo =>\n      // Modified to access \"state.todos\" array\n      todo && todo._id === action.payload._id ? {\n        ...todo,\n        data: action.payload.data\n      } : todo);\n    case actionTypes.DELETE_TODO:\n      const deletedTodoId = action.payload;\n      const updatedTodosAfterDelete = state.todos.filter(todo => todo._id !== deletedTodoId);\n      const deletedTodo = state.todos.find(todo => todo._id === deletedTodoId);\n      return {\n        ...state,\n        todos: updatedTodosAfterDelete,\n        deletedTodos: [...state.deletedTodos, deletedTodo]\n      };\n    case actionTypes.SET_FILTER:\n      return {\n        ...state,\n        filter: action.payload\n      };\n    default:\n      return state;\n  }\n};\nexport default todosReducer; // Export the default reducer","map":{"version":3,"names":["actionTypes","FETCH_TODOS_SUCCESS","initialState","todos","completedTodos","deletedTodos","loading","error","filter","todosReducer","state","action","type","payload","ADDNEW_TODO","GETALL_TODO","TOGGLE_TODO","map","todo","_id","done","UPDATE_TODO","data","DELETE_TODO","deletedTodoId","updatedTodosAfterDelete","deletedTodo","find","SET_FILTER"],"sources":["C:/Users/acer/Desktop/MERN_Todolist/forntend/src/redux/reducers/todosReducer.js"],"sourcesContent":["// import * as actionTypes from '../actions/type';\r\n\r\n// const initialState ={  \r\n//   todos:[],\r\n//   comletedTodos:[],\r\n//   DELETE_TODO:[],\r\n//   loading:false,\r\n//   error:null,};\r\n// export const todosReducers = (state =initialState, action) => {\r\n\r\n//     switch (action.type) {\r\n//         case actionTypes.ADDNEW_TODO:\r\n//             return [action.payload, ...state]\r\n//         case actionTypes.GETALL_TODO:\r\n//             return action.payload\r\n//         case actionTypes.TOGGLE_TODO:\r\n//             return state.map(todo => (\r\n//                 todo._id === action.payload._id ? { ...todo, done: !todo.done } : todo\r\n//             ))\r\n//         case actionTypes.UPDATE_TODO:\r\n//             return state.map(todo => (\r\n//                 todo && todo._id === action.payload._id ? { ...todo, data: action.payload.data } : todo\r\n//             ))\r\n//         case actionTypes.DELETE_TODO:\r\n//             return state.filter(todo => todo._id !== action.payload._id);\r\n        \r\n//         default: \r\n//             return state;\r\n//     }\r\n// };\r\n// import * as actionTypes from '../actions/type';\r\n// import { FETCH_TODOS_SUCCESS } from '../actions/index';\r\n\r\n// const initialState = {\r\n//   todos:[],\r\n//   comletedTodos:[],\r\n//   DELETE_TODO:[],\r\n//   loading:false,\r\n//   error:null,\r\n// };\r\n// export const todosReducers = (state = initialState, action) => {\r\n//   switch (action.type) {\r\n//     case FETCH_TODOS_SUCCESS:\r\n//         return action.payload;\r\n//     case actionTypes.ADDNEW_TODO:\r\n//       return [action.payload, ...state];\r\n//     case actionTypes.GETALL_TODO:\r\n//       return action.payload;\r\n//     case actionTypes.TOGGLE_TODO:\r\n//       return state.map((todo) =>\r\n//         todo._id === action.payload._id ? { ...todo, done: !todo.done } : todo\r\n//       );\r\n//     case actionTypes.UPDATE_TODO:\r\n//       return state.map((todo) =>\r\n//         todo && todo._id === action.payload._id\r\n//           ? { ...todo, data: action.payload.data }\r\n//           : todo\r\n//       );\r\n//     case actionTypes.DELETE_TODO:\r\n//       return state.filter((todo) => todo._id !== action.payload._id);\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n// redux/reducers/todosReducer.js\r\n// redux/reducers/todosReducer.js\r\n\r\n// import * as actionTypes from '../actions/type';\r\n\r\n// const initialState = {\r\n//   todos: [],\r\n//   completedTodos: [],\r\n//   deletedTodos: [],\r\n//   loading: false,\r\n//   error: null,\r\n// };\r\n\r\n// const todosReducer = (state = initialState, action) => {\r\n//   switch (action.type) {\r\n//     case actionTypes.FETCH_TODOS_SUCCESS:\r\n//       return { ...state, todos: action.payload }; // Update todos in state with fetched data\r\n//     case actionTypes.ADDNEW_TODO:\r\n//       return { ...state, todos: [action.payload, ...state.todos] }; // Add new Todo to todos array\r\n//     case actionTypes.GETALL_TODO:\r\n//       return { ...state, todos: action.payload }; // Update todos in state with fetched data\r\n//     case actionTypes.TOGGLE_TODO:\r\n//       const toggledTodoId = action.payload._id;\r\n//       const updatedTodos = state.todos.map((todo) =>\r\n//         todo._id === toggledTodoId ? { ...todo, done: !todo.done } : todo\r\n//       );\r\n//       return {\r\n//         ...state,\r\n//         todos: updatedTodos,\r\n//         completedTodos: updatedTodos.filter((todo) => todo.done),\r\n//       };\r\n//     case actionTypes.UPDATE_TODO:\r\n//       return {\r\n//         ...state,\r\n//         todos: state.todos.map((todo) =>\r\n//           todo._id === action.payload._id ? { ...todo, data: action.payload.data } : todo\r\n//         ),\r\n//       };\r\n//     case actionTypes.DELETE_TODO:\r\n//       const deletedTodoId = action.payload;\r\n//       const updatedTodosAfterDelete = state.todos.filter(\r\n//         (todo) => todo._id !== deletedTodoId\r\n//       );\r\n//       const deletedTodo = state.todos.find((todo) => todo._id === deletedTodoId);\r\n//       return {\r\n//         ...state,\r\n//         todos: updatedTodosAfterDelete,\r\n//         deletedTodos: [...state.deletedTodos, deletedTodo],\r\n//       };\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n\r\n// export default todosReducer;\r\nimport * as actionTypes from '../actions/type';\r\nimport { FETCH_TODOS_SUCCESS } from '../actions/index';\r\n\r\nconst initialState = {\r\n  todos: [],\r\n  completedTodos: [], // Corrected spelling from comletedTodos\r\n  deletedTodos: [],   // Corrected spelling from DELETE_TODO\r\n  loading: false,\r\n  error: null,\r\n  filter: 'all',\r\n};\r\n\r\nconst todosReducer = (state = initialState, action) => { // Changed the name of the reducer to \"todosReducer\"\r\n  switch (action.type) {\r\n    case FETCH_TODOS_SUCCESS:\r\n      return action.payload;\r\n    case actionTypes.ADDNEW_TODO:\r\n      return [action.payload, ...state.todos]; // Modified to access \"state.todos\" array\r\n    case actionTypes.GETALL_TODO:\r\n      return action.payload;\r\n    case actionTypes.TOGGLE_TODO:\r\n      return state.todos.map((todo) => // Modified to access \"state.todos\" array\r\n        todo._id === action.payload._id ? { ...todo, done: !todo.done } : todo\r\n      );\r\n    case actionTypes.UPDATE_TODO:\r\n      return state.todos.map((todo) => // Modified to access \"state.todos\" array\r\n        todo && todo._id === action.payload._id\r\n          ? { ...todo, data: action.payload.data }\r\n          : todo\r\n      );\r\n      case actionTypes.DELETE_TODO:\r\n      const deletedTodoId = action.payload;\r\n      const updatedTodosAfterDelete = state.todos.filter(\r\n        (todo) => todo._id !== deletedTodoId\r\n      );\r\n      const deletedTodo = state.todos.find((todo) => todo._id === deletedTodoId);\r\n      return {\r\n        ...state,\r\n        todos: updatedTodosAfterDelete,\r\n        deletedTodos: [...state.deletedTodos, deletedTodo],\r\n      };\r\n    case actionTypes.SET_FILTER:\r\n      return {\r\n          ...state,\r\n          filter: action.payload,\r\n        };\r\n      default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default todosReducer; // Export the default reducer\r\n"],"mappingsiBAAiB;AAC9C,SAASC,mBAAmB,QAAQ,kBAAkB;AAEtD,MAAMC,YAAY,GAAG;EACnBC,KAAK,EAAE,EAAE;EACTC,cAAc,EAAE,EAAE;EAAE;EACpBC,YAAY,EAAE,EAAE;EAAI;EACpBC,OAAO,EAAE,KAAK;EACdC,KAAK,EAAE,IAAI;EACXC,MAAM,EAAE;AACV,CAAC;AAED,MAAMC,YAAY,GAAGA,CAACC,KAAK,GAAGR,YAAY,EAAES,MAAM,KAAK;EAAE;EACvD,QAAQA,MAAM,CAACC,IAAI;IACjB,KAAKX,mBAAmB;MACtB,OAAOU,MAAM,CAACE,OAAO;IACvB,KAAKb,WAAW,CAACc,WAAW;MAC1B,OAAO,CAACH,MAAM,CAACE,OAAO,EAAE,GAAGH,KAAK,CAACP,KAAK,CAAC;IAAE;IAC3C,KAAKH,WAAW,CAACe,WAAW;MAC1B,OAAOJ,MAAM,CAACE,OAAO;IACvB,KAAKb,WAAW,CAACgB,WAAW;MAC1B,OAAON,KAAK,CAACP,KAAK,CAACc,GAAG,CAAEC,IAAI;MAAK;MAC/BA,IAAI,CAACC,GAAG,KAAKR,MAAM,CAACE,OAAO,CAACM,GAAG,GAAG;QAAE,GAAGD,IAAI;QAAEE,IAAI,EAAE,CAACF,IAAI,CAACE;MAAK,CAAC,GAAGF,IACpE,CAAC;IACH,KAAKlB,WAAW,CAACqB,WAAW;MAC1B,OAAOX,KAAK,CAACP,KAAK,CAACc,GAAG,CAAEC,IAAI;MAAK;MAC/BA,IAAI,IAAIA,IAAI,CAACC,GAAG,KAAKR,MAAM,CAACE,OAAO,CAACM,GAAG,GACnC;QAAE,GAAGD,IAAI;QAAEI,IAAI,EAAEX,MAAM,CAACE,OAAO,CAACS;MAAK,CAAC,GACtCJ,IACN,CAAC;IACD,KAAKlB,WAAW,CAACuB,WAAW;MAC5B,MAAMC,aAAa,GAAGb,MAAM,CAACE,OAAO;MACpC,MAAMY,uBAAuB,GAAGf,KAAK,CAACP,KAAK,CAACK,MAAM,CAC/CU,IAAI,IAAKA,IAAI,CAACC,GAAG,KAAKK,aACzB,CAAC;MACD,MAAME,WAAW,GAAGhB,KAAK,CAACP,KAAK,CAACwB,IAAI,CAAET,IAAI,IAAKA,IAAI,CAACC,GAAG,KAAKK,aAAa,CAAC;MAC1E,OAAO;QACL,GAAGd,KAAK;QACRP,KAAK,EAAEsB,uBAAuB;QAC9BpB,YAAY,EAAE,CAAC,GAAGK,KAAK,CAACL,YAAY,EAAEqB,WAAW;MACnD,CAAC;IACH,KAAK1B,WAAW,CAAC4B,UAAU;MACzB,OAAO;QACH,GAAGlB,KAAK;QACRF,MAAM,EAAEG,MAAM,CAACE;MACjB,CAAC;IACH;MACA,OAAOH,KAAK;EAChB;AACF,CAAC;AAED,eAAeD,YAAY,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}