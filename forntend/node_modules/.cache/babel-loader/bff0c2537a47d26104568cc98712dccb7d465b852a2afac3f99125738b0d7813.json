{"ast":null,"code":"import axios from 'axios';\nexport const registerUser = userData => async dispatch => {\n  try {\n    const res = await axios.post('http://localhost:8000/api/auth/register', userData);\n    dispatch({\n      type: 'REGISTER_SUCCESS',\n      payload: res.data\n    });\n  } catch (error) {\n    dispatch({\n      type: 'REGISTER_FAIL',\n      payload: error.response.data.message\n    });\n  }\n};\nexport const loginAction = (email, password) => async dispatch => {\n  try {\n    const res = await axios.post('http://localhost:8000/api/auth/login', {\n      email,\n      password\n    });\n\n    // Assuming the server returns a token upon successful login\n    const authToken = res.data.token;\n\n    // Store the token in Redux state or localStorage\n    dispatch({\n      type: 'LOGIN_SUCCESS',\n      payload: authToken\n    });\n    return true; // Return true to indicate successful login\n  } catch (error) {\n    dispatch({\n      type: 'LOGIN_FAIL',\n      payload: error.response.data.message\n    });\n    return false; // Return false to indicate login failure\n  }\n};\n\nexport const login = (email, password) => {\n  // Some login logic, API calls, etc.\n  // After successful login, return the action object\n  return {\n    type: 'LOGIN_SUCCESS',\n    payload: {\n      email,\n      password\n    }\n  };\n};","map":{"version":3,"names":["axios","registerUser","userData","dispatch","res","post","type","payload","data","error","response","message","loginAction","email","password","authToken","token","login"],"sources":["C:/Users/acer/Desktop/MERN_Todolist/forntend/src/redux/actions/authActions.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nexport const registerUser = (userData) => async (dispatch) => {\r\n  try {\r\n    const res = await axios.post('http://localhost:8000/api/auth/register', userData);\r\n\r\n    dispatch({\r\n      type: 'REGISTER_SUCCESS',\r\n      payload: res.data,\r\n    });\r\n  } catch (error) {\r\n    dispatch({\r\n      type: 'REGISTER_FAIL',\r\n      payload: error.response.data.message,\r\n    });\r\n  }\r\n};\r\nexport const loginAction = (email, password) => async (dispatch) => {\r\n    try {\r\n      const res = await axios.post('http://localhost:8000/api/auth/login', { email, password });\r\n  \r\n      // Assuming the server returns a token upon successful login\r\n      const authToken = res.data.token;\r\n  \r\n      // Store the token in Redux state or localStorage\r\n      dispatch({\r\n        type: 'LOGIN_SUCCESS',\r\n        payload: authToken,\r\n      });\r\n  \r\n      return true; // Return true to indicate successful login\r\n    } catch (error) {\r\n      dispatch({\r\n        type: 'LOGIN_FAIL',\r\n        payload: error.response.data.message,\r\n      });\r\n  \r\n      return false; // Return false to indicate login failure\r\n    }\r\n  };\r\n\r\n  export const login = (email, password) => {\r\n    // Some login logic, API calls, etc.\r\n    // After successful login, return the action object\r\n    return {\r\n      type: 'LOGIN_SUCCESS',\r\n      payload: { email, password },\r\n    };\r\n  };"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,OAAO,MAAMC,YAAY,GAAIC,QAAQ,IAAK,MAAOC,QAAQ,IAAK;EAC5D,IAAI;IACF,MAAMC,GAAG,GAAG,MAAMJ,KAAK,CAACK,IAAI,CAAC,yCAAyC,EAAEH,QAAQ,CAAC;IAEjFC,QAAQ,CAAC;MACPG,IAAI,EAAE,kBAAkB;MACxBC,OAAO,EAAEH,GAAG,CAACI;IACf,CAAC,CAAC;EACJ,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdN,QAAQ,CAAC;MACPG,IAAI,EAAE,eAAe;MACrBC,OAAO,EAAEE,KAAK,CAACC,QAAQ,CAACF,IAAI,CAACG;IAC/B,CAAC,CAAC;EACJ;AACF,CAAC;AACD,OAAO,MAAMC,WAAW,GAAGA,CAACC,KAAK,EAAEC,QAAQ,KAAK,MAAOX,QAAQ,IAAK;EAChE,IAAI;IACF,MAAMC,GAAG,GAAG,MAAMJ,KAAK,CAACK,IAAI,CAAC,sCAAsC,EAAE;MAAEQ,KAAK;MAAEC;IAAS,CAAC,CAAC;;IAEzF;IACA,MAAMC,SAAS,GAAGX,GAAG,CAACI,IAAI,CAACQ,KAAK;;IAEhC;IACAb,QAAQ,CAAC;MACPG,IAAI,EAAE,eAAe;MACrBC,OAAO,EAAEQ;IACX,CAAC,CAAC;IAEF,OAAO,IAAI,CAAC,CAAC;EACf,CAAC,CAAC,OAAON,KAAK,EAAE;IACdN,QAAQ,CAAC;MACPG,IAAI,EAAE,YAAY;MAClBC,OAAO,EAAEE,KAAK,CAACC,QAAQ,CAACF,IAAI,CAACG;IAC/B,CAAC,CAAC;IAEF,OAAO,KAAK,CAAC,CAAC;EAChB;AACF,CAAC;;AAED,OAAO,MAAMM,KAAK,GAAGA,CAACJ,KAAK,EAAEC,QAAQ,KAAK;EACxC;EACA;EACA,OAAO;IACLR,IAAI,EAAE,eAAe;IACrBC,OAAO,EAAE;MAAEM,KAAK;MAAEC;IAAS;EAC7B,CAAC;AACH,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}