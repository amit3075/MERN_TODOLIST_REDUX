{"ast":null,"code":"// import * as actionTypes from '../actions/type';\n\n// const initialState ={  \n//   todos:[],\n//   comletedTodos:[],\n//   DELETE_TODO:[],\n//   loading:false,\n//   error:null,};\n// export const todosReducers = (state =initialState, action) => {\n\n//     switch (action.type) {\n//         case actionTypes.ADDNEW_TODO:\n//             return [action.payload, ...state]\n//         case actionTypes.GETALL_TODO:\n//             return action.payload\n//         case actionTypes.TOGGLE_TODO:\n//             return state.map(todo => (\n//                 todo._id === action.payload._id ? { ...todo, done: !todo.done } : todo\n//             ))\n//         case actionTypes.UPDATE_TODO:\n//             return state.map(todo => (\n//                 todo && todo._id === action.payload._id ? { ...todo, data: action.payload.data } : todo\n//             ))\n//         case actionTypes.DELETE_TODO:\n//             return state.filter(todo => todo._id !== action.payload._id);\n\n//         default: \n//             return state;\n//     }\n// };\nimport * as actionTypes from '../actions/type';\nimport { FETCH_TODOS_SUCCESS } from '../actions/index';\nconst initialState = {\n  todos: [],\n  comletedTodos: [],\n  DELETE_TODO: [],\n  loading: false,\n  error: null\n};\nexport const todosReducers = (state = initialState, action) => {\n  switch (action.type) {\n    case FETCH_TODOS_SUCCESS:\n      return action.payload;\n    case actionTypes.ADDNEW_TODO:\n      return [action.payload, ...state];\n    case actionTypes.GETALL_TODO:\n      return action.payload;\n    case actionTypes.TOGGLE_TODO:\n      return state.map(todo => todo._id === action.payload._id ? {\n        ...todo,\n        done: !todo.done\n      } : todo);\n    case actionTypes.UPDATE_TODO:\n      return state.map(todo => todo && todo._id === action.payload._id ? {\n        ...todo,\n        data: action.payload.data\n      } : todo);\n    case actionTypes.DELETE_TODO:\n      return state.filter(todo => todo._id !== action.payload._id);\n    default:\n      return state;\n  }\n};\n// redux/reducers/todosReducer.js\n// redux/reducers/todosReducer.js\n\n// import * as actionTypes from '../actions/type';\n\n// const initialState = {\n//   todos: [],\n//   completedTodos: [],\n//   deletedTodos: [],\n//   loading: false,\n//   error: null,\n// };\n\n// const todosReducer = (state = initialState, action) => {\n//   switch (action.type) {\n//     case actionTypes.FETCH_TODOS_SUCCESS:\n//       return { ...state, todos: action.payload }; // Update todos in state with fetched data\n//     case actionTypes.ADDNEW_TODO:\n//       return { ...state, todos: [action.payload, ...state.todos] }; // Add new Todo to todos array\n//     case actionTypes.GETALL_TODO:\n//       return { ...state, todos: action.payload }; // Update todos in state with fetched data\n//     case actionTypes.TOGGLE_TODO:\n//       const toggledTodoId = action.payload._id;\n//       const updatedTodos = state.todos.map((todo) =>\n//         todo._id === toggledTodoId ? { ...todo, done: !todo.done } : todo\n//       );\n//       return {\n//         ...state,\n//         todos: updatedTodos,\n//         completedTodos: updatedTodos.filter((todo) => todo.done),\n//       };\n//     case actionTypes.UPDATE_TODO:\n//       return {\n//         ...state,\n//         todos: state.todos.map((todo) =>\n//           todo._id === action.payload._id ? { ...todo, data: action.payload.data } : todo\n//         ),\n//       };\n//     case actionTypes.DELETE_TODO:\n//       const deletedTodoId = action.payload;\n//       const updatedTodosAfterDelete = state.todos.filter(\n//         (todo) => todo._id !== deletedTodoId\n//       );\n//       const deletedTodo = state.todos.find((todo) => todo._id === deletedTodoId);\n//       return {\n//         ...state,\n//         todos: updatedTodosAfterDelete,\n//         deletedTodos: [...state.deletedTodos, deletedTodo],\n//       };\n//     default:\n//       return state;\n//   }\n// };\n\n// export default todosReducer;","map":{"version":3,"names":["actionTypes","FETCH_TODOS_SUCCESS","initialState","todos","comletedTodos","DELETE_TODO","loading","error","todosReducers","state","action","type","payload","ADDNEW_TODO","GETALL_TODO","TOGGLE_TODO","map","todo","_id","done","UPDATE_TODO","data","filter"],"sources":["C:/Users/acer/Desktop/MERN_Todolist/forntend/src/redux/reducers/todosReducer.js"],"sourcesContent":["// import * as actionTypes from '../actions/type';\r\n\r\n// const initialState ={  \r\n//   todos:[],\r\n//   comletedTodos:[],\r\n//   DELETE_TODO:[],\r\n//   loading:false,\r\n//   error:null,};\r\n// export const todosReducers = (state =initialState, action) => {\r\n\r\n//     switch (action.type) {\r\n//         case actionTypes.ADDNEW_TODO:\r\n//             return [action.payload, ...state]\r\n//         case actionTypes.GETALL_TODO:\r\n//             return action.payload\r\n//         case actionTypes.TOGGLE_TODO:\r\n//             return state.map(todo => (\r\n//                 todo._id === action.payload._id ? { ...todo, done: !todo.done } : todo\r\n//             ))\r\n//         case actionTypes.UPDATE_TODO:\r\n//             return state.map(todo => (\r\n//                 todo && todo._id === action.payload._id ? { ...todo, data: action.payload.data } : todo\r\n//             ))\r\n//         case actionTypes.DELETE_TODO:\r\n//             return state.filter(todo => todo._id !== action.payload._id);\r\n        \r\n//         default: \r\n//             return state;\r\n//     }\r\n// };\r\nimport * as actionTypes from '../actions/type';\r\nimport { FETCH_TODOS_SUCCESS } from '../actions/index';\r\n\r\nconst initialState = {\r\n  todos:[],\r\n  comletedTodos:[],\r\n  DELETE_TODO:[],\r\n  loading:false,\r\n  error:null,\r\n};\r\nexport const todosReducers = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case FETCH_TODOS_SUCCESS:\r\n        return action.payload;\r\n    case actionTypes.ADDNEW_TODO:\r\n      return [action.payload, ...state];\r\n    case actionTypes.GETALL_TODO:\r\n      return action.payload;\r\n    case actionTypes.TOGGLE_TODO:\r\n      return state.map((todo) =>\r\n        todo._id === action.payload._id ? { ...todo, done: !todo.done } : todo\r\n      );\r\n    case actionTypes.UPDATE_TODO:\r\n      return state.map((todo) =>\r\n        todo && todo._id === action.payload._id\r\n          ? { ...todo, data: action.payload.data }\r\n          : todo\r\n      );\r\n    case actionTypes.DELETE_TODO:\r\n      return state.filter((todo) => todo._id !== action.payload._id);\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n// redux/reducers/todosReducer.js\r\n// redux/reducers/todosReducer.js\r\n\r\n// import * as actionTypes from '../actions/type';\r\n\r\n// const initialState = {\r\n//   todos: [],\r\n//   completedTodos: [],\r\n//   deletedTodos: [],\r\n//   loading: false,\r\n//   error: null,\r\n// };\r\n\r\n// const todosReducer = (state = initialState, action) => {\r\n//   switch (action.type) {\r\n//     case actionTypes.FETCH_TODOS_SUCCESS:\r\n//       return { ...state, todos: action.payload }; // Update todos in state with fetched data\r\n//     case actionTypes.ADDNEW_TODO:\r\n//       return { ...state, todos: [action.payload, ...state.todos] }; // Add new Todo to todos array\r\n//     case actionTypes.GETALL_TODO:\r\n//       return { ...state, todos: action.payload }; // Update todos in state with fetched data\r\n//     case actionTypes.TOGGLE_TODO:\r\n//       const toggledTodoId = action.payload._id;\r\n//       const updatedTodos = state.todos.map((todo) =>\r\n//         todo._id === toggledTodoId ? { ...todo, done: !todo.done } : todo\r\n//       );\r\n//       return {\r\n//         ...state,\r\n//         todos: updatedTodos,\r\n//         completedTodos: updatedTodos.filter((todo) => todo.done),\r\n//       };\r\n//     case actionTypes.UPDATE_TODO:\r\n//       return {\r\n//         ...state,\r\n//         todos: state.todos.map((todo) =>\r\n//           todo._id === action.payload._id ? { ...todo, data: action.payload.data } : todo\r\n//         ),\r\n//       };\r\n//     case actionTypes.DELETE_TODO:\r\n//       const deletedTodoId = action.payload;\r\n//       const updatedTodosAfterDelete = state.todos.filter(\r\n//         (todo) => todo._id !== deletedTodoId\r\n//       );\r\n//       const deletedTodo = state.todos.find((todo) => todo._id === deletedTodoId);\r\n//       return {\r\n//         ...state,\r\n//         todos: updatedTodosAfterDelete,\r\n//         deletedTodos: [...state.deletedTodos, deletedTodo],\r\n//       };\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n\r\n// export default todosReducer;\r\n"],"mappings":"AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO,KAAKA,WAAW,MAAM,iBAAiB;AAC9C,SAASC,mBAAmB,QAAQ,kBAAkB;AAEtD,MAAMC,YAAY,GAAG;EACnBC,KAAK,EAAC,EAAE;EACRC,aAAa,EAAC,EAAE;EAChBC,WAAW,EAAC,EAAE;EACdC,OAAO,EAAC,KAAK;EACbC,KAAK,EAAC;AACR,CAAC;AACD,OAAO,MAAMC,aAAa,GAAGA,CAACC,KAAK,GAAGP,YAAY,EAAEQ,MAAM,KAAK;EAC7D,QAAQA,MAAM,CAACC,IAAI;IACjB,KAAKV,mBAAmB;MACpB,OAAOS,MAAM,CAACE,OAAO;IACzB,KAAKZ,WAAW,CAACa,WAAW;MAC1B,OAAO,CAACH,MAAM,CAACE,OAAO,EAAE,GAAGH,KAAK,CAAC;IACnC,KAAKT,WAAW,CAACc,WAAW;MAC1B,OAAOJ,MAAM,CAACE,OAAO;IACvB,KAAKZ,WAAW,CAACe,WAAW;MAC1B,OAAON,KAAK,CAACO,GAAG,CAAEC,IAAI,IACpBA,IAAI,CAACC,GAAG,KAAKR,MAAM,CAACE,OAAO,CAACM,GAAG,GAAG;QAAE,GAAGD,IAAI;QAAEE,IAAI,EAAE,CAACF,IAAI,CAACE;MAAK,CAAC,GAAGF,IACpE,CAAC;IACH,KAAKjB,WAAW,CAACoB,WAAW;MAC1B,OAAOX,KAAK,CAACO,GAAG,CAAEC,IAAI,IACpBA,IAAI,IAAIA,IAAI,CAACC,GAAG,KAAKR,MAAM,CAACE,OAAO,CAACM,GAAG,GACnC;QAAE,GAAGD,IAAI;QAAEI,IAAI,EAAEX,MAAM,CAACE,OAAO,CAACS;MAAK,CAAC,GACtCJ,IACN,CAAC;IACH,KAAKjB,WAAW,CAACK,WAAW;MAC1B,OAAOI,KAAK,CAACa,MAAM,CAAEL,IAAI,IAAKA,IAAI,CAACC,GAAG,KAAKR,MAAM,CAACE,OAAO,CAACM,GAAG,CAAC;IAChE;MACE,OAAOT,KAAK;EAChB;AACF,CAAC;AACD;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA"},"metadata":{},"sourceType":"module","externalDependencies":[]}