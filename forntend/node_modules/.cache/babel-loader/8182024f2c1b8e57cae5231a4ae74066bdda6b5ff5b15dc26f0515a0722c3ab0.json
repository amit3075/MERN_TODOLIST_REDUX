{"ast":null,"code":"// import * as actionTypes from '../actions/type';\n\n// const initialState ={  \n//   todos:[],\n//   comletedTodos:[],\n//   DELETE_TODO:[],\n//   loading:false,\n//   error:null,};\n// export const todosReducers = (state =initialState, action) => {\n\n//     switch (action.type) {\n//         case actionTypes.ADDNEW_TODO:\n//             return [action.payload, ...state]\n//         case actionTypes.GETALL_TODO:\n//             return action.payload\n//         case actionTypes.TOGGLE_TODO:\n//             return state.map(todo => (\n//                 todo._id === action.payload._id ? { ...todo, done: !todo.done } : todo\n//             ))\n//         case actionTypes.UPDATE_TODO:\n//             return state.map(todo => (\n//                 todo && todo._id === action.payload._id ? { ...todo, data: action.payload.data } : todo\n//             ))\n//         case actionTypes.DELETE_TODO:\n//             return state.filter(todo => todo._id !== action.payload._id);\n\n//         default: \n//             return state;\n//     }\n// };\n// import * as actionTypes from '../actions/type';\n// import { FETCH_TODOS_SUCCESS } from '../actions/index';\n\n// const initialState = {\n//   todos:[],\n//   comletedTodos:[],\n//   DELETE_TODO:[],\n//   loading:false,\n//   error:null,\n// };\n// export const todosReducers = (state = initialState, action) => {\n//   switch (action.type) {\n//     case FETCH_TODOS_SUCCESS:\n//         return action.payload;\n//     case actionTypes.ADDNEW_TODO:\n//       return [action.payload, ...state];\n//     case actionTypes.GETALL_TODO:\n//       return action.payload;\n//     case actionTypes.TOGGLE_TODO:\n//       return state.map((todo) =>\n//         todo._id === action.payload._id ? { ...todo, done: !todo.done } : todo\n//       );\n//     case actionTypes.UPDATE_TODO:\n//       return state.map((todo) =>\n//         todo && todo._id === action.payload._id\n//           ? { ...todo, data: action.payload.data }\n//           : todo\n//       );\n//     case actionTypes.DELETE_TODO:\n//       return state.filter((todo) => todo._id !== action.payload._id);\n//     default:\n//       return state;\n//   }\n// };\n// redux/reducers/todosReducer.js\n// redux/reducers/todosReducer.js\n\n// import * as actionTypes from '../actions/type';\n\n// const initialState = {\n//   todos: [],\n//   completedTodos: [],\n//   deletedTodos: [],\n//   loading: false,\n//   error: null,\n// };\n\n// const todosReducer = (state = initialState, action) => {\n//   switch (action.type) {\n//     case actionTypes.FETCH_TODOS_SUCCESS:\n//       return { ...state, todos: action.payload }; // Update todos in state with fetched data\n//     case actionTypes.ADDNEW_TODO:\n//       return { ...state, todos: [action.payload, ...state.todos] }; // Add new Todo to todos array\n//     case actionTypes.GETALL_TODO:\n//       return { ...state, todos: action.payload }; // Update todos in state with fetched data\n//     case actionTypes.TOGGLE_TODO:\n//       const toggledTodoId = action.payload._id;\n//       const updatedTodos = state.todos.map((todo) =>\n//         todo._id === toggledTodoId ? { ...todo, done: !todo.done } : todo\n//       );\n//       return {\n//         ...state,\n//         todos: updatedTodos,\n//         completedTodos: updatedTodos.filter((todo) => todo.done),\n//       };\n//     case actionTypes.UPDATE_TODO:\n//       return {\n//         ...state,\n//         todos: state.todos.map((todo) =>\n//           todo._id === action.payload._id ? { ...todo, data: action.payload.data } : todo\n//         ),\n//       };\n//     case actionTypes.DELETE_TODO:\n//       const deletedTodoId = action.payload;\n//       const updatedTodosAfterDelete = state.todos.filter(\n//         (todo) => todo._id !== deletedTodoId\n//       );\n//       const deletedTodo = state.todos.find((todo) => todo._id === deletedTodoId);\n//       return {\n//         ...state,\n//         todos: updatedTodosAfterDelete,\n//         deletedTodos: [...state.deletedTodos, deletedTodo],\n//       };\n//     default:\n//       return state;\n//   }\n// };\n\n// export default todosReducer;\n// import * as actionTypes from '../actions/type';\n// import { FETCH_TODOS_SUCCESS } from '../actions/index';\n\n// const initialState = {\n//   todos: [],\n//   completedTodos: [], // Corrected spelling from comletedTodos\n//   deletedTodos: [],   // Corrected spelling from DELETE_TODO\n//   loading: false,\n//   error: null,\n//   filter: 'all',\n// };\n\n// const todosReducer = (state = initialState, action) => { // Changed the name of the reducer to \"todosReducer\"\n//   switch (action.type) {\n//     case FETCH_TODOS_SUCCESS:\n//       return action.payload;\n//     case actionTypes.ADDNEW_TODO:\n//       return [action.payload, ...state.todos]; // Modified to access \"state.todos\" array\n//     case actionTypes.GETALL_TODO:\n//       return action.payload;\n//     case actionTypes.TOGGLE_TODO:\n//       return state.todos.map((todo) => // Modified to access \"state.todos\" array\n//         todo._id === action.payload._id ? { ...todo, done: !todo.done } : todo\n//       );\n//     case actionTypes.UPDATE_TODO:\n//       return state.todos.map((todo) => // Modified to access \"state.todos\" array\n//         todo && todo._id === action.payload._id\n//           ? { ...todo, data: action.payload.data }\n//           : todo\n//       );\n//       case actionTypes.DELETE_TODO:\n//       const deletedTodoId = action.payload;\n//       if (!state.todos) return state; \n//       const updatedTodosAfterDelete = state.todos.filter(\n//         (todo) => todo._id !== deletedTodoId\n//       );\n\n//       const deletedTodo = state.todos.find((todo) => todo._id === deletedTodoId);\n//       return {\n//         ...state,\n//         todos: updatedTodosAfterDelete,\n//         deletedTodos: [...state.deletedTodos, deletedTodo],\n//       };\n//     case actionTypes.SET_FILTER:\n//       return {\n//           ...state,\n//           filter: action.payload,\n//         };\n//       default:\n//       return state;\n//   }\n// };\n\n// export default todosReducer; // Export the default reducer\n// redux/reducers/todosReducer.js\n\nimport * as actionTypes from '../actions/type';\nconst initialState = {\n  todos: [],\n  // Initialize todos as an empty array\n  completedTodos: [],\n  deletedTodos: [],\n  loading: false,\n  error: null\n};\nconst todosReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case actionTypes.FETCH_TODOS_SUCCESS:\n      return {\n        ...state,\n        todos: action.payload\n      };\n    // Update todos in state with fetched data\n    case actionTypes.ADDNEW_TODO:\n      return {\n        ...state,\n        todos: [action.payload, ...state.todos]\n      };\n    // Add new Todo to todos array\n    case actionTypes.GETALL_TODO:\n      return {\n        ...state,\n        todos: action.payload\n      };\n    // Update todos in state with fetched data\n    case actionTypes.TOGGLE_TODO:\n      const toggledTodoId = action.payload._id;\n      const updatedTodos = state.todos.map(todo => todo._id === toggledTodoId ? {\n        ...todo,\n        done: !todo.done\n      } : todo);\n      return {\n        ...state,\n        todos: updatedTodos,\n        completedTodos: updatedTodos.filter(todo => todo.done)\n      };\n    case actionTypes.UPDATE_TODO:\n      return {\n        ...state,\n        todos: state.todos.map(todo => todo._id === action.payload._id ? {\n          ...todo,\n          data: action.payload.data\n        } : todo)\n      };\n    case actionTypes.DELETE_TODO:\n      const deletedTodoId = action.payload;\n      const updatedTodosAfterDelete = state.todos.filter(todo => todo._id !== deletedTodoId);\n      const deletedTodo = state.todos.find(todo => todo._id === deletedTodoId);\n      return {\n        ...state,\n        todos: updatedTodosAfterDelete,\n        deletedTodos: [...state.deletedTodos, deletedTodo]\n      };\n    default:\n      return state;\n  }\n};\nexport default todosReducer;","map":{"version":3,"names":["actionTypes","initialState","todos","completedTodos","deletedTodos","loading","error","todosReducer","state","action","type","FETCH_TODOS_SUCCESS","payload","ADDNEW_TODO","GETALL_TODO","TOGGLE_TODO","toggledTodoId","_id","updatedTodos","map","todo","done","filter","UPDATE_TODO","data","DELETE_TODO","deletedTodoId","updatedTodosAfterDelete","deletedTodo","find"],"sources":["C:/Users/acer/Desktop/MERN_Todolist/forntend/src/redux/reducers/todosReducer.js"],"sourcesContent":["// import * as actionTypes from '../actions/type';\r\n\r\n// const initialState ={  \r\n//   todos:[],\r\n//   comletedTodos:[],\r\n//   DELETE_TODO:[],\r\n//   loading:false,\r\n//   error:null,};\r\n// export const todosReducers = (state =initialState, action) => {\r\n\r\n//     switch (action.type) {\r\n//         case actionTypes.ADDNEW_TODO:\r\n//             return [action.payload, ...state]\r\n//         case actionTypes.GETALL_TODO:\r\n//             return action.payload\r\n//         case actionTypes.TOGGLE_TODO:\r\n//             return state.map(todo => (\r\n//                 todo._id === action.payload._id ? { ...todo, done: !todo.done } : todo\r\n//             ))\r\n//         case actionTypes.UPDATE_TODO:\r\n//             return state.map(todo => (\r\n//                 todo && todo._id === action.payload._id ? { ...todo, data: action.payload.data } : todo\r\n//             ))\r\n//         case actionTypes.DELETE_TODO:\r\n//             return state.filter(todo => todo._id !== action.payload._id);\r\n        \r\n//         default: \r\n//             return state;\r\n//     }\r\n// };\r\n// import * as actionTypes from '../actions/type';\r\n// import { FETCH_TODOS_SUCCESS } from '../actions/index';\r\n\r\n// const initialState = {\r\n//   todos:[],\r\n//   comletedTodos:[],\r\n//   DELETE_TODO:[],\r\n//   loading:false,\r\n//   error:null,\r\n// };\r\n// export const todosReducers = (state = initialState, action) => {\r\n//   switch (action.type) {\r\n//     case FETCH_TODOS_SUCCESS:\r\n//         return action.payload;\r\n//     case actionTypes.ADDNEW_TODO:\r\n//       return [action.payload, ...state];\r\n//     case actionTypes.GETALL_TODO:\r\n//       return action.payload;\r\n//     case actionTypes.TOGGLE_TODO:\r\n//       return state.map((todo) =>\r\n//         todo._id === action.payload._id ? { ...todo, done: !todo.done } : todo\r\n//       );\r\n//     case actionTypes.UPDATE_TODO:\r\n//       return state.map((todo) =>\r\n//         todo && todo._id === action.payload._id\r\n//           ? { ...todo, data: action.payload.data }\r\n//           : todo\r\n//       );\r\n//     case actionTypes.DELETE_TODO:\r\n//       return state.filter((todo) => todo._id !== action.payload._id);\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n// redux/reducers/todosReducer.js\r\n// redux/reducers/todosReducer.js\r\n\r\n// import * as actionTypes from '../actions/type';\r\n\r\n// const initialState = {\r\n//   todos: [],\r\n//   completedTodos: [],\r\n//   deletedTodos: [],\r\n//   loading: false,\r\n//   error: null,\r\n// };\r\n\r\n// const todosReducer = (state = initialState, action) => {\r\n//   switch (action.type) {\r\n//     case actionTypes.FETCH_TODOS_SUCCESS:\r\n//       return { ...state, todos: action.payload }; // Update todos in state with fetched data\r\n//     case actionTypes.ADDNEW_TODO:\r\n//       return { ...state, todos: [action.payload, ...state.todos] }; // Add new Todo to todos array\r\n//     case actionTypes.GETALL_TODO:\r\n//       return { ...state, todos: action.payload }; // Update todos in state with fetched data\r\n//     case actionTypes.TOGGLE_TODO:\r\n//       const toggledTodoId = action.payload._id;\r\n//       const updatedTodos = state.todos.map((todo) =>\r\n//         todo._id === toggledTodoId ? { ...todo, done: !todo.done } : todo\r\n//       );\r\n//       return {\r\n//         ...state,\r\n//         todos: updatedTodos,\r\n//         completedTodos: updatedTodos.filter((todo) => todo.done),\r\n//       };\r\n//     case actionTypes.UPDATE_TODO:\r\n//       return {\r\n//         ...state,\r\n//         todos: state.todos.map((todo) =>\r\n//           todo._id === action.payload._id ? { ...todo, data: action.payload.data } : todo\r\n//         ),\r\n//       };\r\n//     case actionTypes.DELETE_TODO:\r\n//       const deletedTodoId = action.payload;\r\n//       const updatedTodosAfterDelete = state.todos.filter(\r\n//         (todo) => todo._id !== deletedTodoId\r\n//       );\r\n//       const deletedTodo = state.todos.find((todo) => todo._id === deletedTodoId);\r\n//       return {\r\n//         ...state,\r\n//         todos: updatedTodosAfterDelete,\r\n//         deletedTodos: [...state.deletedTodos, deletedTodo],\r\n//       };\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n\r\n// export default todosReducer;\r\n// import * as actionTypes from '../actions/type';\r\n// import { FETCH_TODOS_SUCCESS } from '../actions/index';\r\n\r\n// const initialState = {\r\n//   todos: [],\r\n//   completedTodos: [], // Corrected spelling from comletedTodos\r\n//   deletedTodos: [],   // Corrected spelling from DELETE_TODO\r\n//   loading: false,\r\n//   error: null,\r\n//   filter: 'all',\r\n// };\r\n\r\n// const todosReducer = (state = initialState, action) => { // Changed the name of the reducer to \"todosReducer\"\r\n//   switch (action.type) {\r\n//     case FETCH_TODOS_SUCCESS:\r\n//       return action.payload;\r\n//     case actionTypes.ADDNEW_TODO:\r\n//       return [action.payload, ...state.todos]; // Modified to access \"state.todos\" array\r\n//     case actionTypes.GETALL_TODO:\r\n//       return action.payload;\r\n//     case actionTypes.TOGGLE_TODO:\r\n//       return state.todos.map((todo) => // Modified to access \"state.todos\" array\r\n//         todo._id === action.payload._id ? { ...todo, done: !todo.done } : todo\r\n//       );\r\n//     case actionTypes.UPDATE_TODO:\r\n//       return state.todos.map((todo) => // Modified to access \"state.todos\" array\r\n//         todo && todo._id === action.payload._id\r\n//           ? { ...todo, data: action.payload.data }\r\n//           : todo\r\n//       );\r\n//       case actionTypes.DELETE_TODO:\r\n//       const deletedTodoId = action.payload;\r\n//       if (!state.todos) return state; \r\n//       const updatedTodosAfterDelete = state.todos.filter(\r\n//         (todo) => todo._id !== deletedTodoId\r\n//       );\r\n\r\n//       const deletedTodo = state.todos.find((todo) => todo._id === deletedTodoId);\r\n//       return {\r\n//         ...state,\r\n//         todos: updatedTodosAfterDelete,\r\n//         deletedTodos: [...state.deletedTodos, deletedTodo],\r\n//       };\r\n//     case actionTypes.SET_FILTER:\r\n//       return {\r\n//           ...state,\r\n//           filter: action.payload,\r\n//         };\r\n//       default:\r\n//       return state;\r\n//   }\r\n// };\r\n\r\n// export default todosReducer; // Export the default reducer\r\n// redux/reducers/todosReducer.js\r\n\r\nimport * as actionTypes from '../actions/type';\r\n\r\nconst initialState = {\r\n  todos: [], // Initialize todos as an empty array\r\n  completedTodos: [],\r\n  deletedTodos: [],\r\n  loading: false,\r\n  error: null,\r\n};\r\n\r\nconst todosReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case actionTypes.FETCH_TODOS_SUCCESS:\r\n      return { ...state, todos: action.payload }; // Update todos in state with fetched data\r\n    case actionTypes.ADDNEW_TODO:\r\n      return { ...state, todos: [action.payload, ...state.todos] }; // Add new Todo to todos array\r\n    case actionTypes.GETALL_TODO:\r\n      return { ...state, todos: action.payload }; // Update todos in state with fetched data\r\n    case actionTypes.TOGGLE_TODO:\r\n      const toggledTodoId = action.payload._id;\r\n      const updatedTodos = state.todos.map((todo) =>\r\n        todo._id === toggledTodoId ? { ...todo, done: !todo.done } : todo\r\n      );\r\n      return {\r\n        ...state,\r\n        todos: updatedTodos,\r\n        completedTodos: updatedTodos.filter((todo) => todo.done),\r\n      };\r\n    case actionTypes.UPDATE_TODO:\r\n      return {\r\n        ...state,\r\n        todos: state.todos.map((todo) =>\r\n          todo._id === action.payload._id ? { ...todo, data: action.payload.data } : todo\r\n        ),\r\n      };\r\n    case actionTypes.DELETE_TODO:\r\n      const deletedTodoId = action.payload;\r\n      const updatedTodosAfterDelete = state.todos.filter(\r\n        (todo) => todo._id !== deletedTodoId\r\n      );\r\n      const deletedTodo = state.todos.find((todo) => todo._id === deletedTodoId);\r\n      return {\r\n        ...state,\r\n        todos: updatedTodosAfterDelete,\r\n        deletedTodos: [...state.deletedTodos, deletedTodo],\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default todosReducer;\r\n"],"mappingsiBAAiB;AAE9C,MAAMC,YAAY,GAAG;EACnBC,KAAK,EAAE,EAAE;EAAE;EACXC,cAAc,EAAE,EAAE;EAClBC,YAAY,EAAE,EAAE;EAChBC,OAAO,EAAE,KAAK;EACdC,KAAK,EAAE;AACT,CAAC;AAED,MAAMC,YAAY,GAAGA,CAACC,KAAK,GAAGP,YAAY,EAAEQ,MAAM,KAAK;EACrD,QAAQA,MAAM,CAACC,IAAI;IACjB,KAAKV,WAAW,CAACW,mBAAmB;MAClC,OAAO;QAAE,GAAGH,KAAK;QAAEN,KAAK,EAAEO,MAAM,CAACG;MAAQ,CAAC;IAAE;IAC9C,KAAKZ,WAAW,CAACa,WAAW;MAC1B,OAAO;QAAE,GAAGL,KAAK;QAAEN,KAAK,EAAE,CAACO,MAAM,CAACG,OAAO,EAAE,GAAGJ,KAAK,CAACN,KAAK;MAAE,CAAC;IAAE;IAChE,KAAKF,WAAW,CAACc,WAAW;MAC1B,OAAO;QAAE,GAAGN,KAAK;QAAEN,KAAK,EAAEO,MAAM,CAACG;MAAQ,CAAC;IAAE;IAC9C,KAAKZ,WAAW,CAACe,WAAW;MAC1B,MAAMC,aAAa,GAAGP,MAAM,CAACG,OAAO,CAACK,GAAG;MACxC,MAAMC,YAAY,GAAGV,KAAK,CAACN,KAAK,CAACiB,GAAG,CAAEC,IAAI,IACxCA,IAAI,CAACH,GAAG,KAAKD,aAAa,GAAG;QAAE,GAAGI,IAAI;QAAEC,IAAI,EAAE,CAACD,IAAI,CAACC;MAAK,CAAC,GAAGD,IAC/D,CAAC;MACD,OAAO;QACL,GAAGZ,KAAK;QACRN,KAAK,EAAEgB,YAAY;QACnBf,cAAc,EAAEe,YAAY,CAACI,MAAM,CAAEF,IAAI,IAAKA,IAAI,CAACC,IAAI;MACzD,CAAC;IACH,KAAKrB,WAAW,CAACuB,WAAW;MAC1B,OAAO;QACL,GAAGf,KAAK;QACRN,KAAK,EAAEM,KAAK,CAACN,KAAK,CAACiB,GAAG,CAAEC,IAAI,IAC1BA,IAAI,CAACH,GAAG,KAAKR,MAAM,CAACG,OAAO,CAACK,GAAG,GAAG;UAAE,GAAGG,IAAI;UAAEI,IAAI,EAAEf,MAAM,CAACG,OAAO,CAACY;QAAK,CAAC,GAAGJ,IAC7E;MACF,CAAC;IACH,KAAKpB,WAAW,CAACyB,WAAW;MAC1B,MAAMC,aAAa,GAAGjB,MAAM,CAACG,OAAO;MACpC,MAAMe,uBAAuB,GAAGnB,KAAK,CAACN,KAAK,CAACoB,MAAM,CAC/CF,IAAI,IAAKA,IAAI,CAACH,GAAG,KAAKS,aACzB,CAAC;MACD,MAAME,WAAW,GAAGpB,KAAK,CAACN,KAAK,CAAC2B,IAAI,CAAET,IAAI,IAAKA,IAAI,CAACH,GAAG,KAAKS,aAAa,CAAC;MAC1E,OAAO;QACL,GAAGlB,KAAK;QACRN,KAAK,EAAEyB,uBAAuB;QAC9BvB,YAAY,EAAE,CAAC,GAAGI,KAAK,CAACJ,YAAY,EAAEwB,WAAW;MACnD,CAAC;IACH;MACE,OAAOpB,KAAK;EAChB;AACF,CAAC;AAED,eAAeD,YAAY"},"metadata":{},"sourceType":"module","externalDependencies":[]}