{"ast":null,"code":"// redux/actions/index.js\n\n// Import the axios library to make API requests\nimport axios from 'axios';\n\n// Action Types\nexport const FETCH_TODOS_REQUEST = 'FETCH_TODOS_REQUEST';\nexport const FETCH_TODOS_SUCCESS = 'FETCH_TODOS_SUCCESS';\nexport const FETCH_TODOS_FAILURE = 'FETCH_TODOS_FAILURE';\n\n// Action Creators\nexport const fetchTodosRequest = () => ({\n  type: FETCH_TODOS_REQUEST\n});\nexport const fetchTodosSuccess = todos => ({\n  type: FETCH_TODOS_SUCCESS,\n  payload: todos\n});\nexport const fetchTodosFailure = error => ({\n  type: FETCH_TODOS_FAILURE,\n  payload: error\n});\n\n// Thunk to fetch the list of Todo items from the backend API\nexport const fetchTodos = () => {\n  return async dispatch => {\n    dispatch(fetchTodosRequest());\n    try {\n      // Make the API request to fetch the Todo items\n      const response = await axios.get('https://your-backend-api-url/todos');\n\n      // Dispatch the success action with the fetched Todo items\n      dispatch(fetchTodosSuccess(response.data));\n    } catch (error) {\n      // Dispatch the failure action if the API request fails\n      dispatch(fetchTodosFailure(error.message));\n    }\n  };\n};\nimport { ADDNEW_TODO, GETALL_TODO, TOGGLE_TODO, UPDATE_TODO, DELETE_TODO, TOGGLE_TAB } from './type';\nconst API_URL = 'http://localhost:8000';\nexport const addNewTodo = data => {\n  return async dispatch => {\n    try {\n      const response = await fetch(\"http://localhost:8000/api/todos\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          data\n        }) // Use { data } instead of { data: text }\n      });\n\n      if (!response.ok) {\n        throw new Error(\"Failed to add new todo.\");\n      }\n      const newTodo = await response.json();\n\n      // Dispatch the action to add the newTodo to the Redux store\n      dispatch({\n        type: ADDNEW_TODO,\n        payload: newTodo\n      });\n    } catch (error) {\n      console.error(\"Error adding new todo:\", error);\n    }\n  };\n};\nexport const getAllTodos = () => {\n  return async dispatch => {\n    try {\n      const response = await fetch(\"http://localhost:8000/api/todos\");\n      if (!response.ok) {\n        throw new Error(\"Failed to fetch todos.\");\n      }\n      const todos = await response.json();\n      dispatch({\n        type: GETALL_TODO,\n        payload: todos\n      });\n    } catch (error) {\n      console.error(\"Error while calling getAllTodos API:\", error);\n    }\n  };\n};\nexport const toggleTodo = id => {\n  return async dispatch => {\n    try {\n      const response = await axios.get(`${API_URL}/api/todos/${id}`);\n      if (response.status === 200) {\n        const toggledTodo = response.data; // Access the data directly from response.data\n        dispatch({\n          type: TOGGLE_TODO,\n          payload: toggledTodo\n        });\n      } else {\n        throw new Error(\"Failed to toggle todo.\");\n      }\n    } catch (error) {\n      console.error(\"Error while calling toggleTodo API:\", error);\n    }\n  };\n};\nexport const updateTodo = (id, data) => {\n  return async dispatch => {\n    try {\n      // Ensure that the data object is not null or undefined\n      if (!data) {\n        throw new Error(\"Data is missing or invalid.\");\n      }\n      const response = await axios.put(`${API_URL}/api/todos/${id}`, {\n        data\n      });\n      if (response.status === 200) {\n        const updatedTodo = response.data;\n        dispatch({\n          type: UPDATE_TODO,\n          payload: updatedTodo\n        });\n      } else {\n        throw new Error(\"Failed to update todo.\");\n      }\n    } catch (error) {\n      console.error(\"Error while calling updateTodo API:\", error);\n      // Handle error gracefully and notify the user if needed\n      // You can dispatch an action to set an error state in the Redux store if necessary.\n    }\n  };\n};\n\n// export const deleteTodo = (id) => async (dispatch) => {\n//     try {\n//         const res = await axios.delete(`${API_URL}/todos/${id}`);\n\n//         dispatch({ type: DELETE_TODO , payload: res.data });\n//     } catch (error) {\n//         console.log('Error while calling deleteTodo API ', error.message);\n//     }\n// }\n// export const deleteTodo = (id) => {\n//     return async (dispatch) => {\n//       try {\n//         const response = await axios.delete(`${API_URL}/api/todos/${id}`);\n//         if (!response.ok) {\n//           throw new Error(\"Failed to delete todo.\");\n//         }\n//         dispatch({ type: DELETE_TODO, payload: id });\n//       } catch (error) {\n//         console.error(\"Error while calling deleteTodo API:\", error);\n//       }\n//     };\n//   };\n\nexport const deleteTodo = id => {\n  return async dispatch => {\n    try {\n      const response = await axios.delete(`${API_URL}/api/todos/${id}`);\n      if (response.status === 200) {\n        // Successful deletion, dispatch the action to remove the todo from the store\n        dispatch({\n          type: DELETE_TODO,\n          payload: id\n        });\n      } else {\n        throw new Error(\"Failed to delete todo.\");\n      }\n    } catch (error) {\n      console.error(\"Error while calling deleteTodo API:\", error);\n    }\n  };\n};\n\n// export const toggleTab = (tab) => async (dispatch) => {\n//     dispatch({ type: TOGGLE_TAB, selected: tab })\n// }\nexport const toggleTab = tab => {\n  return {\n    type: TOGGLE_TAB,\n    selected: tab\n  };\n};","map":{"version":3,"names":["axios","FETCH_TODOS_REQUEST","FETCH_TODOS_SUCCESS","FETCH_TODOS_FAILURE","fetchTodosRequest","type","fetchTodosSuccess","todos","payload","fetchTodosFailure","error","fetchTodos","dispatch","response","get","data","message","ADDNEW_TODO","GETALL_TODO","TOGGLE_TODO","UPDATE_TODO","DELETE_TODO","TOGGLE_TAB","API_URL","addNewTodo","fetch","method","headers","body","JSON","stringify","ok","Error","newTodo","json","console","getAllTodos","toggleTodo","id","status","toggledTodo","updateTodo","put","updatedTodo","deleteTodo","delete","toggleTab","tab","selected"],"sources":["C:/Users/acer/Desktop/MERN_Todolist/forntend/src/redux/actions/index.js"],"sourcesContent":["// redux/actions/index.js\r\n\r\n// Import the axios library to make API requests\r\nimport axios from 'axios';\r\n\r\n// Action Types\r\nexport const FETCH_TODOS_REQUEST = 'FETCH_TODOS_REQUEST';\r\nexport const FETCH_TODOS_SUCCESS = 'FETCH_TODOS_SUCCESS';\r\nexport const FETCH_TODOS_FAILURE = 'FETCH_TODOS_FAILURE';\r\n\r\n// Action Creators\r\nexport const fetchTodosRequest = () => ({\r\n  type: FETCH_TODOS_REQUEST,\r\n});\r\n\r\nexport const fetchTodosSuccess = (todos) => ({\r\n  type: FETCH_TODOS_SUCCESS,\r\n  payload: todos,\r\n});\r\n\r\nexport const fetchTodosFailure = (error) => ({\r\n  type: FETCH_TODOS_FAILURE,\r\n  payload: error,\r\n});\r\n\r\n// Thunk to fetch the list of Todo items from the backend API\r\nexport const fetchTodos = () => {\r\n  return async (dispatch) => {\r\n    dispatch(fetchTodosRequest());\r\n    try {\r\n      // Make the API request to fetch the Todo items\r\n      const response = await axios.get('https://your-backend-api-url/todos');\r\n\r\n      // Dispatch the success action with the fetched Todo items\r\n      dispatch(fetchTodosSuccess(response.data));\r\n    } catch (error) {\r\n      // Dispatch the failure action if the API request fails\r\n      dispatch(fetchTodosFailure(error.message));\r\n    }\r\n  };\r\n};\r\n\r\n\r\nimport { ADDNEW_TODO, GETALL_TODO, TOGGLE_TODO, UPDATE_TODO, DELETE_TODO, TOGGLE_TAB } from './type';\r\n\r\nconst API_URL = 'http://localhost:8000';\r\n\r\n\r\nexport const addNewTodo = (data) => {\r\n    return async (dispatch) => {\r\n      try {\r\n        const response = await fetch(\"http://localhost:8000/api/todos\", {\r\n          method: \"POST\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          body: JSON.stringify({ data }), // Use { data } instead of { data: text }\r\n        });\r\n  \r\n        if (!response.ok) {\r\n          throw new Error(\"Failed to add new todo.\");\r\n        }\r\n  \r\n        const newTodo = await response.json();\r\n  \r\n        // Dispatch the action to add the newTodo to the Redux store\r\n        dispatch({ type: ADDNEW_TODO, payload: newTodo });\r\n      } catch (error) {\r\n        console.error(\"Error adding new todo:\", error);\r\n      }\r\n    };\r\n  };\r\n  \r\n  \r\n\r\n  \r\n\r\n\r\nexport const getAllTodos = () => {\r\n    return async (dispatch) => {\r\n      try {\r\n        const response = await fetch(\"http://localhost:8000/api/todos\");\r\n        if (!response.ok) {\r\n          throw new Error(\"Failed to fetch todos.\");\r\n        }\r\n        const todos = await response.json();\r\n        dispatch({ type: GETALL_TODO, payload: todos });\r\n      } catch (error) {\r\n        console.error(\"Error while calling getAllTodos API:\", error);\r\n      }\r\n    };\r\n  };\r\n\r\n\r\n\r\nexport const toggleTodo = (id) => {\r\n  return async (dispatch) => {\r\n    try {\r\n      const response = await axios.get(`${API_URL}/api/todos/${id}`);\r\n      if (response.status === 200) {\r\n        const toggledTodo = response.data; // Access the data directly from response.data\r\n        dispatch({ type: TOGGLE_TODO, payload: toggledTodo });\r\n      } else {\r\n        throw new Error(\"Failed to toggle todo.\");\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error while calling toggleTodo API:\", error);\r\n    \r\n    }\r\n  };\r\n};\r\n\r\n  \r\n  \r\n\r\n  \r\nexport const updateTodo = (id, data) => {\r\n  return async (dispatch) => {\r\n    try {\r\n      // Ensure that the data object is not null or undefined\r\n      if (!data) {\r\n        throw new Error(\"Data is missing or invalid.\");\r\n      }\r\n\r\n      const response = await axios.put(`${API_URL}/api/todos/${id}`, { data });\r\n      if (response.status === 200) {\r\n        const updatedTodo = response.data;\r\n        dispatch({ type: UPDATE_TODO, payload: updatedTodo });\r\n      } else {\r\n        throw new Error(\"Failed to update todo.\");\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error while calling updateTodo API:\", error);\r\n      // Handle error gracefully and notify the user if needed\r\n      // You can dispatch an action to set an error state in the Redux store if necessary.\r\n    }\r\n  };\r\n};\r\n  \r\n\r\n// export const deleteTodo = (id) => async (dispatch) => {\r\n//     try {\r\n//         const res = await axios.delete(`${API_URL}/todos/${id}`);\r\n\r\n//         dispatch({ type: DELETE_TODO , payload: res.data });\r\n//     } catch (error) {\r\n//         console.log('Error while calling deleteTodo API ', error.message);\r\n//     }\r\n// }\r\n// export const deleteTodo = (id) => {\r\n//     return async (dispatch) => {\r\n//       try {\r\n//         const response = await axios.delete(`${API_URL}/api/todos/${id}`);\r\n//         if (!response.ok) {\r\n//           throw new Error(\"Failed to delete todo.\");\r\n//         }\r\n//         dispatch({ type: DELETE_TODO, payload: id });\r\n//       } catch (error) {\r\n//         console.error(\"Error while calling deleteTodo API:\", error);\r\n//       }\r\n//     };\r\n//   };\r\n\r\nexport const deleteTodo = (id) => {\r\n    return async (dispatch) => {\r\n      try {\r\n        const response = await axios.delete(`${API_URL}/api/todos/${id}`);\r\n        if (response.status === 200) {\r\n          // Successful deletion, dispatch the action to remove the todo from the store\r\n          dispatch({ type: DELETE_TODO, payload: id });\r\n        } else {\r\n          throw new Error(\"Failed to delete todo.\");\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error while calling deleteTodo API:\", error);\r\n      }\r\n    };\r\n  };\r\n  \r\n  \r\n\r\n// export const toggleTab = (tab) => async (dispatch) => {\r\n//     dispatch({ type: TOGGLE_TAB, selected: tab })\r\n// }\r\nexport const toggleTab = (tab) => {\r\n    return { type: TOGGLE_TAB, selected: tab };\r\n  };\r\n  \r\n\r\n\r\n"],"mappings":"AAAA;;AAEA;AACA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,OAAO,MAAMC,mBAAmB,GAAG,qBAAqB;AACxD,OAAO,MAAMC,mBAAmB,GAAG,qBAAqB;AACxD,OAAO,MAAMC,mBAAmB,GAAG,qBAAqB;;AAExD;AACA,OAAO,MAAMC,iBAAiB,GAAGA,CAAA,MAAO;EACtCC,IAAI,EAAEJ;AACR,CAAC,CAAC;AAEF,OAAO,MAAMK,iBAAiB,GAAIC,KAAK,KAAM;EAC3CF,IAAI,EAAEH,mBAAmB;EACzBM,OAAO,EAAED;AACX,CAAC,CAAC;AAEF,OAAO,MAAME,iBAAiB,GAAIC,KAAK,KAAM;EAC3CL,IAAI,EAAEF,mBAAmB;EACzBK,OAAO,EAAEE;AACX,CAAC,CAAC;;AAEF;AACA,OAAO,MAAMC,UAAU,GAAGA,CAAA,KAAM;EAC9B,OAAO,MAAOC,QAAQ,IAAK;IACzBA,QAAQ,CAACR,iBAAiB,CAAC,CAAC,CAAC;IAC7B,IAAI;MACF;MACA,MAAMS,QAAQ,GAAG,MAAMb,KAAK,CAACc,GAAG,CAAC,oCAAoC,CAAC;;MAEtE;MACAF,QAAQ,CAACN,iBAAiB,CAACO,QAAQ,CAACE,IAAI,CAAC,CAAC;IAC5C,CAAC,CAAC,OAAOL,KAAK,EAAE;MACd;MACAE,QAAQ,CAACH,iBAAiB,CAACC,KAAK,CAACM,OAAO,CAAC,CAAC;IAC5C;EACF,CAAC;AACH,CAAC;AAGD,SAASC,WAAW,EAAEC,WAAW,EAAEC,WAAW,EAAEC,WAAW,EAAEC,WAAW,EAAEC,UAAU,QAAQ,QAAQ;AAEpG,MAAMC,OAAO,GAAG,uBAAuB;AAGvC,OAAO,MAAMC,UAAU,GAAIT,IAAI,IAAK;EAChC,OAAO,MAAOH,QAAQ,IAAK;IACzB,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMY,KAAK,CAAC,iCAAiC,EAAE;QAC9DC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAEf;QAAK,CAAC,CAAC,CAAE;MAClC,CAAC,CAAC;;MAEF,IAAI,CAACF,QAAQ,CAACkB,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,yBAAyB,CAAC;MAC5C;MAEA,MAAMC,OAAO,GAAG,MAAMpB,QAAQ,CAACqB,IAAI,CAAC,CAAC;;MAErC;MACAtB,QAAQ,CAAC;QAAEP,IAAI,EAAEY,WAAW;QAAET,OAAO,EAAEyB;MAAQ,CAAC,CAAC;IACnD,CAAC,CAAC,OAAOvB,KAAK,EAAE;MACdyB,OAAO,CAACzB,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;IAChD;EACF,CAAC;AACH,CAAC;AAOH,OAAO,MAAM0B,WAAW,GAAGA,CAAA,KAAM;EAC7B,OAAO,MAAOxB,QAAQ,IAAK;IACzB,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMY,KAAK,CAAC,iCAAiC,CAAC;MAC/D,IAAI,CAACZ,QAAQ,CAACkB,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,wBAAwB,CAAC;MAC3C;MACA,MAAMzB,KAAK,GAAG,MAAMM,QAAQ,CAACqB,IAAI,CAAC,CAAC;MACnCtB,QAAQ,CAAC;QAAEP,IAAI,EAAEa,WAAW;QAAEV,OAAO,EAAED;MAAM,CAAC,CAAC;IACjD,CAAC,CAAC,OAAOG,KAAK,EAAE;MACdyB,OAAO,CAACzB,KAAK,CAAC,sCAAsC,EAAEA,KAAK,CAAC;IAC9D;EACF,CAAC;AACH,CAAC;AAIH,OAAO,MAAM2B,UAAU,GAAIC,EAAE,IAAK;EAChC,OAAO,MAAO1B,QAAQ,IAAK;IACzB,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMb,KAAK,CAACc,GAAG,CAAE,GAAES,OAAQ,cAAae,EAAG,EAAC,CAAC;MAC9D,IAAIzB,QAAQ,CAAC0B,MAAM,KAAK,GAAG,EAAE;QAC3B,MAAMC,WAAW,GAAG3B,QAAQ,CAACE,IAAI,CAAC,CAAC;QACnCH,QAAQ,CAAC;UAAEP,IAAI,EAAEc,WAAW;UAAEX,OAAO,EAAEgC;QAAY,CAAC,CAAC;MACvD,CAAC,MAAM;QACL,MAAM,IAAIR,KAAK,CAAC,wBAAwB,CAAC;MAC3C;IACF,CAAC,CAAC,OAAOtB,KAAK,EAAE;MACdyB,OAAO,CAACzB,KAAK,CAAC,qCAAqC,EAAEA,KAAK,CAAC;IAE7D;EACF,CAAC;AACH,CAAC;AAMD,OAAO,MAAM+B,UAAU,GAAGA,CAACH,EAAE,EAAEvB,IAAI,KAAK;EACtC,OAAO,MAAOH,QAAQ,IAAK;IACzB,IAAI;MACF;MACA,IAAI,CAACG,IAAI,EAAE;QACT,MAAM,IAAIiB,KAAK,CAAC,6BAA6B,CAAC;MAChD;MAEA,MAAMnB,QAAQ,GAAG,MAAMb,KAAK,CAAC0C,GAAG,CAAE,GAAEnB,OAAQ,cAAae,EAAG,EAAC,EAAE;QAAEvB;MAAK,CAAC,CAAC;MACxE,IAAIF,QAAQ,CAAC0B,MAAM,KAAK,GAAG,EAAE;QAC3B,MAAMI,WAAW,GAAG9B,QAAQ,CAACE,IAAI;QACjCH,QAAQ,CAAC;UAAEP,IAAI,EAAEe,WAAW;UAAEZ,OAAO,EAAEmC;QAAY,CAAC,CAAC;MACvD,CAAC,MAAM;QACL,MAAM,IAAIX,KAAK,CAAC,wBAAwB,CAAC;MAC3C;IACF,CAAC,CAAC,OAAOtB,KAAK,EAAE;MACdyB,OAAO,CAACzB,KAAK,CAAC,qCAAqC,EAAEA,KAAK,CAAC;MAC3D;MACA;IACF;EACF,CAAC;AACH,CAAC;;AAGD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMkC,UAAU,GAAIN,EAAE,IAAK;EAC9B,OAAO,MAAO1B,QAAQ,IAAK;IACzB,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMb,KAAK,CAAC6C,MAAM,CAAE,GAAEtB,OAAQ,cAAae,EAAG,EAAC,CAAC;MACjE,IAAIzB,QAAQ,CAAC0B,MAAM,KAAK,GAAG,EAAE;QAC3B;QACA3B,QAAQ,CAAC;UAAEP,IAAI,EAAEgB,WAAW;UAAEb,OAAO,EAAE8B;QAAG,CAAC,CAAC;MAC9C,CAAC,MAAM;QACL,MAAM,IAAIN,KAAK,CAAC,wBAAwB,CAAC;MAC3C;IACF,CAAC,CAAC,OAAOtB,KAAK,EAAE;MACdyB,OAAO,CAACzB,KAAK,CAAC,qCAAqC,EAAEA,KAAK,CAAC;IAC7D;EACF,CAAC;AACH,CAAC;;AAIH;AACA;AACA;AACA,OAAO,MAAMoC,SAAS,GAAIC,GAAG,IAAK;EAC9B,OAAO;IAAE1C,IAAI,EAAEiB,UAAU;IAAE0B,QAAQ,EAAED;EAAI,CAAC;AAC5C,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}