{"ast":null,"code":"// redux/actions/index.js\n\n// Import the axios library to make API requests\nimport axios from 'axios';\n\n// Action Types\n\nimport { ADDNEW_TODO, GETALL_TODO, TOGGLE_TODO, UPDATE_TODO, DELETE_TODO, TOGGLE_TAB } from './type';\nconst API_URL = 'http://localhost:8000';\nexport const FETCH_TODOS_REQUEST = 'FETCH_TODOS_REQUEST';\nexport const FETCH_TODOS_SUCCESS = 'FETCH_TODOS_SUCCESS';\nexport const FETCH_TODOS_FAILURE = 'FETCH_TODOS_FAILURE';\nexport const fetchTodos = () => async dispatch => {\n  try {\n    const response = await axios.get('http://localhost:8000/api/todos'); // Assuming your backend API endpoint for fetching Todos is '/api/todos'\n    const todos = response.data; // Assuming the response data contains an array of Todos\n    dispatch({\n      type: 'FETCH_TODOS_SUCCESS',\n      payload: todos\n    });\n  } catch (error) {\n    dispatch({\n      type: 'FETCH_TODOS_FAILURE',\n      payload: error.message\n    });\n  }\n};\n// export const toggleTodo = (id) => (dispatch) => {\n//   dispatch({ type: 'TOGGLE_TODO', payload: id });\n// };\n\n// export const updateTodo = (id, data) => (dispatch) => {\n//   dispatch({ type: 'UPDATE_TODO', payload: { id, data } });\n// };\n\n// export const deleteTodo = (id) => (dispatch) => {\n//   dispatch({ type: 'DELETE_TODO', payload: id });\n// };\n\n// Action Creators\n// export const fetchTodosRequest = () => ({\n//   type: FETCH_TODOS_REQUEST,\n// });\n\n// export const fetchTodosSuccess = (todos) => ({\n//   type: FETCH_TODOS_SUCCESS,\n//   payload: todos.map((todo) => ({ ...todo, key: todo._id })), // Add a unique key for each todo item\n// });\n\n// export const fetchTodosFailure = (error) => ({\n//   type: FETCH_TODOS_FAILURE,\n//   payload: error,\n// });\n\n// // Thunk to fetch the list of Todo items from the backend API\n// export const fetchTodos = () => {\n//   return async (dispatch) => {\n//     dispatch(fetchTodosRequest());\n//     try {\n//       // Make the API request to fetch the Todo items\n//       const response = await axios.get('http://localhost:8000/api/todos');\n\n//       // Dispatch the success action with the fetched Todo items\n//       dispatch(fetchTodosSuccess(response.data));\n//     } catch (error) {\n//       // Dispatch the failure action if the API request fails\n//       dispatch(fetchTodosFailure(error.message));\n//     }\n//   };\n// };\n\nexport const addNewTodo = data => {\n  return async dispatch => {\n    try {\n      const response = await fetch(\"http://localhost:8000/api/todos\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          data\n        }) // Use { data } instead of { data: text }\n      });\n\n      if (!response.ok) {\n        throw new Error(\"Failed to add new todo.\");\n      }\n      const newTodo = await response.json();\n\n      // Dispatch the action to add the newTodo to the Redux store\n      dispatch({\n        type: ADDNEW_TODO,\n        payload: newTodo\n      });\n    } catch (error) {\n      console.error(\"Error adding new todo:\", error);\n    }\n  };\n};\n\n// export const getAllTodos = () => {\n//     return async (dispatch) => {\n//       try {\n//         const response = await fetch(\"http://localhost:8000/api/todos\");\n//         if (!response.ok) {\n//           throw new Error(\"Failed to fetch todos.\");\n//         }\n//         const todos = await response.json();\n//         dispatch({ type: GETALL_TODO, payload: todos });\n//       } catch (error) {\n//         console.error(\"Error while calling getAllTodos API:\", error);\n//       }\n//     };\n//   };\n\nexport const toggleTodo = id => {\n  return async dispatch => {\n    try {\n      const response = await axios.get(`${API_URL}/api/todos/${id}`);\n      if (response.status === 200) {\n        const toggledTodo = response.data; // Access the data directly from response.data\n        dispatch({\n          type: TOGGLE_TODO,\n          payload: toggledTodo\n        });\n      } else {\n        throw new Error(\"Failed to toggle todo.\");\n      }\n    } catch (error) {\n      console.error(\"Error while calling toggleTodo API:\", error);\n    }\n  };\n};\nexport const updateTodo = (id, data) => {\n  return async dispatch => {\n    try {\n      // Ensure that the data object is not null or undefined\n      if (!data) {\n        throw new Error(\"Data is missing or invalid.\");\n      }\n      const response = await axios.put(`${API_URL}/api/todos/${id}`, {\n        data\n      });\n      if (response.status === 200) {\n        const updatedTodo = response.data;\n        dispatch({\n          type: UPDATE_TODO,\n          payload: updatedTodo\n        });\n      } else {\n        throw new Error(\"Failed to update todo.\");\n      }\n    } catch (error) {\n      console.error(\"Error while calling updateTodo API:\", error);\n      // Handle error gracefully and notify the user if needed\n      // You can dispatch an action to set an error state in the Redux store if necessary.\n    }\n  };\n};\n\nexport const deleteTodo = id => {\n  return async dispatch => {\n    try {\n      const response = await axios.delete(`${API_URL}/api/todos/${id}`);\n      if (response.status === 200) {\n        // Successful deletion, dispatch the action to remove the todo from the store\n        dispatch({\n          type: DELETE_TODO,\n          payload: id\n        });\n      } else {\n        throw new Error(\"Failed to delete todo.\");\n      }\n    } catch (error) {\n      console.error(\"Error while calling deleteTodo API:\", error);\n    }\n  };\n};\n\n// export const toggleTab = (tab) => {\n//     return { type: TOGGLE_TAB, selected: tab };\n//   };\n// export const SET_FILTER = 'SET_FILTER';\n// export const setFilter = (filter) => ({\n//   type: SET_FILTER,\n//   payload: filter,\n// });","map":{"version":3,"names":["axios","ADDNEW_TODO","GETALL_TODO","TOGGLE_TODO","UPDATE_TODO","DELETE_TODO","TOGGLE_TAB","API_URL","FETCH_TODOS_REQUEST","FETCH_TODOS_SUCCESS","FETCH_TODOS_FAILURE","fetchTodos","dispatch","response","get","todos","data","type","payload","error","message","addNewTodo","fetch","method","headers","body","JSON","stringify","ok","Error","newTodo","json","console","toggleTodo","id","status","toggledTodo","updateTodo","put","updatedTodo","deleteTodo","delete"],"sources":["C:/Users/acer/Desktop/MERN_Todolist/forntend/src/redux/actions/index.js"],"sourcesContent":["// redux/actions/index.js\r\n\r\n// Import the axios library to make API requests\r\nimport axios from 'axios';\r\n\r\n// Action Types\r\n\r\n\r\n\r\nimport { ADDNEW_TODO, GETALL_TODO, TOGGLE_TODO, UPDATE_TODO, DELETE_TODO, TOGGLE_TAB } from './type';\r\n\r\nconst API_URL = 'http://localhost:8000';\r\nexport const FETCH_TODOS_REQUEST = 'FETCH_TODOS_REQUEST';\r\nexport const FETCH_TODOS_SUCCESS = 'FETCH_TODOS_SUCCESS';\r\nexport const FETCH_TODOS_FAILURE = 'FETCH_TODOS_FAILURE';\r\nexport const fetchTodos = () => async (dispatch) => {\r\n  try {\r\n    const response = await axios.get('http://localhost:8000/api/todos'); // Assuming your backend API endpoint for fetching Todos is '/api/todos'\r\n    const todos = response.data; // Assuming the response data contains an array of Todos\r\n    dispatch({ type: 'FETCH_TODOS_SUCCESS', payload: todos });\r\n  } catch (error) {\r\n    dispatch({ type: 'FETCH_TODOS_FAILURE', payload: error.message });\r\n  }\r\n};\r\n// export const toggleTodo = (id) => (dispatch) => {\r\n//   dispatch({ type: 'TOGGLE_TODO', payload: id });\r\n// };\r\n\r\n// export const updateTodo = (id, data) => (dispatch) => {\r\n//   dispatch({ type: 'UPDATE_TODO', payload: { id, data } });\r\n// };\r\n\r\n// export const deleteTodo = (id) => (dispatch) => {\r\n//   dispatch({ type: 'DELETE_TODO', payload: id });\r\n// };\r\n\r\n// Action Creators\r\n// export const fetchTodosRequest = () => ({\r\n//   type: FETCH_TODOS_REQUEST,\r\n// });\r\n\r\n// export const fetchTodosSuccess = (todos) => ({\r\n//   type: FETCH_TODOS_SUCCESS,\r\n//   payload: todos.map((todo) => ({ ...todo, key: todo._id })), // Add a unique key for each todo item\r\n// });\r\n\r\n// export const fetchTodosFailure = (error) => ({\r\n//   type: FETCH_TODOS_FAILURE,\r\n//   payload: error,\r\n// });\r\n\r\n// // Thunk to fetch the list of Todo items from the backend API\r\n// export const fetchTodos = () => {\r\n//   return async (dispatch) => {\r\n//     dispatch(fetchTodosRequest());\r\n//     try {\r\n//       // Make the API request to fetch the Todo items\r\n//       const response = await axios.get('http://localhost:8000/api/todos');\r\n\r\n//       // Dispatch the success action with the fetched Todo items\r\n//       dispatch(fetchTodosSuccess(response.data));\r\n//     } catch (error) {\r\n//       // Dispatch the failure action if the API request fails\r\n//       dispatch(fetchTodosFailure(error.message));\r\n//     }\r\n//   };\r\n// };\r\n\r\n\r\nexport const addNewTodo = (data) => {\r\n    return async (dispatch) => {\r\n      try {\r\n        const response = await fetch(\"http://localhost:8000/api/todos\", {\r\n          method: \"POST\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          body: JSON.stringify({ data }), // Use { data } instead of { data: text }\r\n        });\r\n  \r\n        if (!response.ok) {\r\n          throw new Error(\"Failed to add new todo.\");\r\n        }\r\n  \r\n        const newTodo = await response.json();\r\n  \r\n        // Dispatch the action to add the newTodo to the Redux store\r\n        dispatch({ type: ADDNEW_TODO, payload: newTodo });\r\n      } catch (error) {\r\n        console.error(\"Error adding new todo:\", error);\r\n      }\r\n    };\r\n  };\r\n  \r\n  \r\n\r\n  \r\n\r\n\r\n// export const getAllTodos = () => {\r\n//     return async (dispatch) => {\r\n//       try {\r\n//         const response = await fetch(\"http://localhost:8000/api/todos\");\r\n//         if (!response.ok) {\r\n//           throw new Error(\"Failed to fetch todos.\");\r\n//         }\r\n//         const todos = await response.json();\r\n//         dispatch({ type: GETALL_TODO, payload: todos });\r\n//       } catch (error) {\r\n//         console.error(\"Error while calling getAllTodos API:\", error);\r\n//       }\r\n//     };\r\n//   };\r\n\r\n\r\n\r\nexport const toggleTodo = (id) => {\r\n  return async (dispatch) => {\r\n    try {\r\n      const response = await axios.get(`${API_URL}/api/todos/${id}`);\r\n      if (response.status === 200) {\r\n        const toggledTodo = response.data; // Access the data directly from response.data\r\n        dispatch({ type: TOGGLE_TODO, payload: toggledTodo });\r\n      } else {\r\n        throw new Error(\"Failed to toggle todo.\");\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error while calling toggleTodo API:\", error);\r\n\r\n    \r\n    }\r\n  };\r\n};\r\n\r\n  \r\n  \r\n\r\n  \r\nexport const updateTodo = (id, data) => {\r\n  return async (dispatch) => {\r\n    try {\r\n      // Ensure that the data object is not null or undefined\r\n      if (!data) {\r\n        throw new Error(\"Data is missing or invalid.\");\r\n      }\r\n\r\n      const response = await axios.put(`${API_URL}/api/todos/${id}`, { data });\r\n      if (response.status === 200) {\r\n        const updatedTodo = response.data;\r\n        dispatch({ type: UPDATE_TODO, payload: updatedTodo });\r\n      } else {\r\n        throw new Error(\"Failed to update todo.\");\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error while calling updateTodo API:\", error);\r\n      // Handle error gracefully and notify the user if needed\r\n      // You can dispatch an action to set an error state in the Redux store if necessary.\r\n    }\r\n  };\r\n};\r\n  \r\n\r\n\r\nexport const deleteTodo = (id) => {\r\n    return async (dispatch) => {\r\n      try {\r\n        const response = await axios.delete(`${API_URL}/api/todos/${id}`);\r\n        if (response.status === 200) {\r\n          // Successful deletion, dispatch the action to remove the todo from the store\r\n          dispatch({ type: DELETE_TODO, payload: id });\r\n        } else {\r\n          throw new Error(\"Failed to delete todo.\");\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error while calling deleteTodo API:\", error);\r\n      }\r\n    };\r\n  };\r\n  \r\n  \r\n\r\n\r\n// export const toggleTab = (tab) => {\r\n//     return { type: TOGGLE_TAB, selected: tab };\r\n//   };\r\n// export const SET_FILTER = 'SET_FILTER';\r\n// export const setFilter = (filter) => ({\r\n//   type: SET_FILTER,\r\n//   payload: filter,\r\n// });\r\n\r\n\r\n\r\n\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}