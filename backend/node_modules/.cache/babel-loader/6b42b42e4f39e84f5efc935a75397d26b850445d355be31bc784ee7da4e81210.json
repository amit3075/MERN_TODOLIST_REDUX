{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\acer\\\\Desktop\\\\MERN_Todolist\\\\forntend\\\\src\\\\components\\\\Todos.jsx\",\n  _s = $RefreshSig$();\n// import { useEffect } from 'react';\n\n// import { deleteTodo, getAllTodos } from '../redux/actions/index';\n// import { ALL_TODOS, DONE_TODOS, ACTIVE_TODOS } from '../redux/actions/type';\n\n// import { useDispatch, useSelector } from 'react-redux';\n\n// // component\n// import Todo from './Todo';\n// import Tabs from './Tabs';\n\n// export const Todos = () => {\n\n//     const dispatch = useDispatch();\n\n//     const todos = useSelector(state => state.todos);\n//     const currentTab = useSelector(state => state.currentTab);\n\n//     useEffect(() => {\n//         dispatch(getAllTodos());\n//     }, [])\n\n//     const getTodos = () => {\n//         if (currentTab === ALL_TODOS) {\n//             return todos;\n//         } else if (currentTab === ACTIVE_TODOS) {\n//             return todos.filter(todo => !todo.done)\n//         } else if (currentTab === DONE_TODOS) {\n//             return todos.filter(todo => todo.done)\n//         }\n//     }\n\n//     const removeDoneTodos = () => {\n//         todos.forEach(({ done, _id }) => {\n//             if (done) {\n//                 dispatch(deleteTodo(_id));\n//             }\n//         })\n//     }\n\n//     return (\n//         <article>\n//             <div>\n//                 <Tabs currentTab={currentTab} />\n\n//                 {\n//                     todos.some(todo => todo.done) ? (\n//                         <button\n//                             onClick={removeDoneTodos}\n//                             className=\"button clear\"\n//                         >Remove Done Todos</button>\n//                     ) : null    \n//                 }\n//             </div>\n\n//             <ul>\n//                 {\n//                     getTodos().map(todo => (\n//                         <Todo \n//                             key={todo._id}\n//                             todo={todo}\n//                         />\n//                     ))\n//                 }\n//             </ul>\n//         </article>\n//     )\n// }\n\n//export default Todos;\n// import React, { useEffect } from 'react';\n// import { useDispatch, useSelector } from 'react-redux';\n// import { getAllTodos, deleteTodo } from '../redux/actions';\n// import Todo from './Todo';\n// import Tabs from './Tabs';\n\n// const Todos = () => {\n//   const dispatch = useDispatch();\n//   const todos = useSelector((state) => state.todos);\n//   const currentTab = useSelector((state) => state.currentTab);\n\n//   useEffect(() => {\n//     dispatch(getAllTodos());\n//   }, [dispatch]);\n\n//   const getTodos = () => {\n//     if (currentTab === 'All Todos') {\n//       return todos;\n//     } else if (currentTab === 'Active Todos') {\n//       return todos.filter((todo) => !todo.done);\n//     } else if (currentTab === 'Done Todos') {\n//       return todos.filter((todo) => todo.done);\n//     }\n//     return []; // Return an empty array if no condition matches to avoid 'map' error.\n//   };\n\n//   const removeDoneTodos = () => {\n//     todos.forEach(({ done, _id }) => {\n//       if (done) {\n//         dispatch(deleteTodo(_id));\n//       }\n//     });\n//   };\n\n//   return (\n//     <article>\n//       <div>\n//         <Tabs currentTab={currentTab} />\n\n//         {todos.some((todo) => todo.done) ? (\n//           <button onClick={removeDoneTodos} className=\"button clear\">\n//             Remove Done Todos\n//           </button>\n//         ) : null}\n//       </div>\n\n//       <ul>\n//         {getTodos().map((todo) => (\n//           <Todo key={todo._id} todo={todo} />\n//         ))}\n//       </ul>\n//     </article>\n//   );\n// };\n\n// export default Todos;\n// import React , { useEffect }from 'react';\n// import { useDispatch, useSelector } from 'react-redux';\n// import { getAllTodos, deleteTodo } from '../redux/actions/index';\n// import Todo from './Todo';\n// import Tabs from './Tabs';\n// import TodoForm from './TodoForm'; // Import the TodoForm component\n\n// const Todos = () => {\n//   const dispatch = useDispatch();\n//   const todos = useSelector((state) => state.todos);\n//   const currentTab = useSelector((state) => state.currentTab);\n\n//   useEffect(() => {\n//     dispatch(getAllTodos());\n//   }, [dispatch]);\n\n//   const getTodos = () => {\n//     if (currentTab === 'All Todos') {\n//       return todos;\n//     } else if (currentTab === 'Active Todos') {\n//       return todos.filter((todo) => !todo.done);\n//     } else if (currentTab === 'Done Todos') {\n//       return todos.filter((todo) => todo.done);\n//     }\n//   };\n\n//   const removeDoneTodos = () => {\n//     todos.forEach(({ done, _id }) => {\n//       if (done) {\n//         dispatch(deleteTodo(_id));\n//       }\n//     });\n//   };\n\n//   return (\n//     <article>\n//       <div>\n//         <TodoForm /> {/* Include the TodoForm component here */}\n//         <Tabs currentTab={currentTab} />\n\n//         {todos.some((todo) => todo.done) ? (\n//           <button onClick={removeDoneTodos} className=\"button clear\">\n//             Remove Done Todos\n//           </button>\n//         ) : null}\n//       </div>\n\n//       <ul>\n//         {getTodos().map((todo) => (\n//           <Todo key={todo._id} todo={todo} />\n//         ))}\n//       </ul>\n//     </article>\n//   );\n// };\n\n// export default Todos;\n// import React, { useEffect } from 'react';\n// import { useDispatch, useSelector } from 'react-redux';\n// import { getAllTodos, deleteTodo } from '../redux/actions';\n// import Todo from './Todo';\n// import Tabs from './Tabs';\n// import TodoForm from './TodoForm';\n// import Header from './Header';\n\n// const Todos = () => {\n//   const dispatch = useDispatch();\n//   const todos = useSelector((state) => state.todos);\n//   const currentTab = useSelector((state) => state.currentTab);\n\n//   useEffect(() => {\n//     dispatch(getAllTodos());\n//   }, [dispatch]);\n\n//   const getTodos = () => {\n//     if (!todos) return []; // Handle the case when todos is undefined\n//     if (currentTab === 'All Todos') {\n//         console.log(currentTab);\n//       return todos;\n//     } else if (currentTab === 'Active Todos') {\n//       return todos.filter((todo) => !todo.done);\n//     } else if (currentTab === 'Done Todos') {\n//       return todos.filter((todo) => todo.done);\n//     } else {\n//       return []; // Handle the case when the currentTab is not recognized\n//     }\n\n//   };\n\n//   const removeDoneTodos = () => {\n//     if (!todos) return; // Ensure todos is not undefined\n//     todos.forEach(({ done, _id }) => {\n//       if (done) {\n//         dispatch(deleteTodo(_id));\n//       }\n//     });\n//   };\n\n//   return (\n//     <article>\n//       <div>\n//         <Header/>\n//         <TodoForm/>\n\n//         <Tabs currentTab={currentTab} />\n\n//         {todos && todos.some((todo) => todo.done) ? (\n//           <button onClick={removeDoneTodos} className=\"button clear\">\n//             Remove Done Todos\n//           </button>\n//         ) : null}\n\n//       </div>\n\n//       <ul>\n\n//         {getTodos().map((todo) => (\n//           <Todo key={todo._id} todo={todo} />\n//         ))}\n\n//       </ul>\n//     </article>\n//   );\n// };\n\n// export default Todos;\n// import React, { useEffect } from 'react';\n// import { useSelector, useDispatch } from 'react-redux';\n// import { fetchTodos, setFilter } from '../redux/actions/index';\n// import Todo from './Todo';\n// import TodoForm from './TodoForm';\n// import Header from './Header';\n// import '../App.css';\n\n// const Todos = () => {\n//   const dispatch = useDispatch();\n//   const todos = useSelector((state) => state.todos); // Assuming your todos reducer stores the Todo items\n//  const completedTodos = useSelector((state) => state.completedTodos);\n//    const deletedTodos = useSelector((state) => state.deletedTodos);\n//   const filter = useSelector((state) => state.filter);\n//   useEffect(() => {\n//     // Fetch the Todo items when the component mounts\n//     dispatch(fetchTodos());\n\n//   }, [dispatch]);\n\n//   const handleFilter = (filter) => {\n//     dispatch(setFilter(filter));\n//   };\n//   const getFilteredTodos = () => {\n//     switch (filter) {\n//       case 'active':\n//         return todos.filter((todo) => !todo.done);\n//       case 'done':\n//         return todos.filter((todo) => todo.done);\n//       default:\n//         return todos;\n//     };\n//   if (!Array.isArray(todos)) {\n//     // Render the LoadingMessage component instead of the loading message\n//     return (console.log('hello world'))\n\n//   }\n\n//   return (\n//     <>\n//      <Header/>\n//      <TodoForm/>\n//      <div>\n//         <button onClick={() => handleFilter('all')}>All Todos</button>\n//         <button onClick={() => handleFilter('active')}>Active Todos</button>\n//         <button onClick={() => handleFilter('done')}>Done Todos</button>\n//       </div>\n\n//      <div>\n//       <h1>Todo List</h1>\n//       {todos.map((todo) => (\n//         <Todo key={todo.id} todo={todo} />\n//       ))}\n//         <ul>\n//         {getFilteredTodos().map((todo) => (\n//           <Todo key={todo.id} todo={todo} />\n//         ))}\n//       </ul>\n//     </div>\n//     </>\n\n//   );\n// }}\n\n// export default Todos;\n\n// import React, { useEffect } from 'react';\n// import { useSelector, useDispatch } from 'react-redux';\n// import { fetchTodos, setFilter } from '../redux/actions/index';\n// import Todo from './Todo';\n// import TodoForm from './TodoForm';\n// import Header from './Header';\n// import '../App.css';\n\n// const Todos = () => {\n//   const dispatch = useDispatch();\n//   const todos = useSelector((state) => state.todos); // Assuming your todos reducer stores the Todo items\n//   // const completedTodos = useSelector((state) => state.completedTodos);\n//   // const deletedTodos = useSelector((state) => state.deletedTodos);\n//   const filter = useSelector((state) => state.filter);\n\n//   useEffect(() => {\n//     // Fetch the Todo items when the component mounts\n//     dispatch(fetchTodos());\n//   }, [dispatch]);\n\n//   const handleFilter = (filter) => {\n//     dispatch(setFilter(filter));\n//   };\n\n//   const getFilteredTodos = () => {\n//     switch (filter) {\n//       case 'active':\n//         return todos.filter((todo) => !todo.done);\n//       case 'done':\n//         return todos.filter((todo) => todo.done);\n//       default:\n//         return todos;\n//     }\n//   };\n\n//   // Move this 'if' statement outside the getFilteredTodos function\n//   if (!Array.isArray(todos)) {\n//     // Render the LoadingMessage component instead of the loading message\n//     return console.log('hello world');\n//   }\n\n//   return (\n//     <>\n//       <Header />\n//       <TodoForm />\n//       <div>\n//         <button onClick={() => handleFilter('all')}>All Todos</button>\n//         <button onClick={() => handleFilter('active')}>Active Todos</button>\n//         <button onClick={() => handleFilter('done')}>Done Todos</button>\n//       </div>\n\n//       <div>\n//         <h1>Todo List</h1>\n//         {todos.map((todo) => (\n//           <Todo key={todo.id} todo={todo} />\n//         ))}\n//         <ul>\n//           {getFilteredTodos().map((todo) => (\n//             <Todo key={todo.id} todo={todo} />\n//           ))}\n//         </ul>\n//       </div>\n//     </>\n//   );\n// };\n\n// export default Todos;\n// import React, { useEffect } from 'react';\n// import { useSelector, useDispatch } from 'react-redux';\n// import { fetchTodos, setFilter, addNewTodo } from '../redux/actions/index';\n// import Todo from './Todo';\n// import TodoForm from './TodoForm';\n// import Header from './Header';\n// import '../App.css';\n\n// const Todos = () => {\n//   const dispatch = useDispatch();\n//   const todos = useSelector((state) => state.todos); // Assuming your todos reducer stores the Todo items\n//   const loading = useSelector((state) => state.loading); // Get the loading state from the Redux store\n\n//   const filter = useSelector((state) => state.filter);\n\n//   useEffect(() => {\n//     // Fetch the Todo items when the component mounts\n//     dispatch(fetchTodos());\n//   }, [dispatch]);\n\n//   const handleFilter = (filter) => {\n//     dispatch(setFilter(filter));\n//   };\n//   const handleAddNewTodo = (data) => {\n//     // Dispatch the addNewTodo action with the new todo data\n//     dispatch(addNewTodo(data));\n//   };\n\n//   const getFilteredTodos = () => {\n//     if (!todos) return [];\n//     switch (filter) {\n//       case 'active':\n//         const activeTodos = todos.filter((todo) => !todo.done);\n//         console.log('Active Todos:', activeTodos);\n//         return activeTodos;\n//       case 'done':\n//         const doneTodos = todos.filter((todo) => todo.done);\n//         console.log('Done Todos:', doneTodos);\n//         return doneTodos;\n//       default:\n//         return todos || [];\n//     }\n//   };\n//   const allTodosCount = todos.length;\n\n//   // Handle the loading state\n//   if (loading) {\n//     return <div>Loading...</div>; // You can show a loading spinner or any other loading UI here\n//   }\n\n//   return (\n//     <>\n//       <Header />\n//       <TodoForm onAddNewTodo={handleAddNewTodo} />\n//       <div>\n//         <button onClick={() => handleFilter('all')}>All Todos({allTodosCount})</button>\n//         <button onClick={() => handleFilter('active')}>Active Todos</button>\n//         <button onClick={() => handleFilter('done')}>Done Todos</button>\n//       </div>\n\n//       <div>\n//         <h1>Todo List</h1>\n//         {/* Ensure getFilteredTodos() always returns an array before using map */}\n//         {Array.isArray(getFilteredTodos()) ? (\n//           getFilteredTodos().map((todo) => <Todo key={todo.id} todo={todo} />)\n//         ) : (\n//           <div>No todos to display.</div>\n//         )}\n//       </div>\n//     </>\n//   );\n// };\n\n// export default Todos;\nimport React, { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { fetchTodos, addNewTodo } from '../redux/actions/index';\nimport Todo from './Todo';\nimport TodoForm from './TodoForm';\nimport Header from './Header';\nimport '../App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Todos = () => {\n  _s();\n  const dispatch = useDispatch();\n  const todos = useSelector(state => state.todos || []); // Access the todos state from the Redux store\n  console.log('todos:', todos);\n  useEffect(() => {\n    // Fetch the Todo items when the component mounts\n    dispatch(fetchTodos());\n  }, [dispatch]);\n  const handleAddNewTodo = data => {\n    // Dispatch the addNewTodo action with the new todo data\n    dispatch(addNewTodo(data));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 495,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TodoForm, {\n      onAddNewTodo: handleAddNewTodo\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 496,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Todo List\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 498,\n        columnNumber: 9\n      }, this), todos.map(todo => /*#__PURE__*/_jsxDEV(Todo, {\n        todo: todo\n      }, todo._id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 500,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 497,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 494,\n    columnNumber: 5\n  }, this);\n};\n_s(Todos, \"o7Q03MspXWTyThwxSzUb4/gicZ0=\", false, function () {\n  return [useDispatch, useSelector];\n});\n_c = Todos;\nexport default Todos;\nvar _c;\n$RefreshReg$(_c, \"Todos\");","map":{"version":3,"names":["React","useEffect","useSelector","useDispatch","fetchTodos","addNewTodo","Todo","TodoForm","Header","jsxDEV","_jsxDEV","Todos","_s","dispatch","todos","state","console","log","handleAddNewTodo","data","children","fileName","_jsxFileName","lineNumber","columnNumber","onAddNewTodo","map","todo","_id","_c","$RefreshReg$"],"sources":["C:/Users/acer/Desktop/MERN_Todolist/forntend/src/components/Todos.jsx"],"sourcesContent":["// import { useEffect } from 'react';\r\n\r\n// import { deleteTodo, getAllTodos } from '../redux/actions/index';\r\n// import { ALL_TODOS, DONE_TODOS, ACTIVE_TODOS } from '../redux/actions/type';\r\n\r\n// import { useDispatch, useSelector } from 'react-redux';\r\n\r\n\r\n// // component\r\n// import Todo from './Todo';\r\n// import Tabs from './Tabs';\r\n\r\n\r\n// export const Todos = () => {\r\n\r\n//     const dispatch = useDispatch();\r\n\r\n//     const todos = useSelector(state => state.todos);\r\n//     const currentTab = useSelector(state => state.currentTab);\r\n\r\n//     useEffect(() => {\r\n//         dispatch(getAllTodos());\r\n//     }, [])\r\n\r\n//     const getTodos = () => {\r\n//         if (currentTab === ALL_TODOS) {\r\n//             return todos;\r\n//         } else if (currentTab === ACTIVE_TODOS) {\r\n//             return todos.filter(todo => !todo.done)\r\n//         } else if (currentTab === DONE_TODOS) {\r\n//             return todos.filter(todo => todo.done)\r\n//         }\r\n//     }\r\n\r\n//     const removeDoneTodos = () => {\r\n//         todos.forEach(({ done, _id }) => {\r\n//             if (done) {\r\n//                 dispatch(deleteTodo(_id));\r\n//             }\r\n//         })\r\n//     }\r\n\r\n//     return (\r\n//         <article>\r\n//             <div>\r\n//                 <Tabs currentTab={currentTab} />\r\n\r\n//                 {\r\n//                     todos.some(todo => todo.done) ? (\r\n//                         <button\r\n//                             onClick={removeDoneTodos}\r\n//                             className=\"button clear\"\r\n//                         >Remove Done Todos</button>\r\n//                     ) : null    \r\n//                 }\r\n//             </div>\r\n\r\n//             <ul>\r\n//                 {\r\n//                     getTodos().map(todo => (\r\n//                         <Todo \r\n//                             key={todo._id}\r\n//                             todo={todo}\r\n//                         />\r\n//                     ))\r\n//                 }\r\n//             </ul>\r\n//         </article>\r\n//     )\r\n// }\r\n\r\n//export default Todos;\r\n// import React, { useEffect } from 'react';\r\n// import { useDispatch, useSelector } from 'react-redux';\r\n// import { getAllTodos, deleteTodo } from '../redux/actions';\r\n// import Todo from './Todo';\r\n// import Tabs from './Tabs';\r\n\r\n// const Todos = () => {\r\n//   const dispatch = useDispatch();\r\n//   const todos = useSelector((state) => state.todos);\r\n//   const currentTab = useSelector((state) => state.currentTab);\r\n\r\n//   useEffect(() => {\r\n//     dispatch(getAllTodos());\r\n//   }, [dispatch]);\r\n\r\n//   const getTodos = () => {\r\n//     if (currentTab === 'All Todos') {\r\n//       return todos;\r\n//     } else if (currentTab === 'Active Todos') {\r\n//       return todos.filter((todo) => !todo.done);\r\n//     } else if (currentTab === 'Done Todos') {\r\n//       return todos.filter((todo) => todo.done);\r\n//     }\r\n//     return []; // Return an empty array if no condition matches to avoid 'map' error.\r\n//   };\r\n\r\n//   const removeDoneTodos = () => {\r\n//     todos.forEach(({ done, _id }) => {\r\n//       if (done) {\r\n//         dispatch(deleteTodo(_id));\r\n//       }\r\n//     });\r\n//   };\r\n\r\n//   return (\r\n//     <article>\r\n//       <div>\r\n//         <Tabs currentTab={currentTab} />\r\n\r\n//         {todos.some((todo) => todo.done) ? (\r\n//           <button onClick={removeDoneTodos} className=\"button clear\">\r\n//             Remove Done Todos\r\n//           </button>\r\n//         ) : null}\r\n//       </div>\r\n\r\n//       <ul>\r\n//         {getTodos().map((todo) => (\r\n//           <Todo key={todo._id} todo={todo} />\r\n//         ))}\r\n//       </ul>\r\n//     </article>\r\n//   );\r\n// };\r\n\r\n// export default Todos;\r\n// import React , { useEffect }from 'react';\r\n// import { useDispatch, useSelector } from 'react-redux';\r\n// import { getAllTodos, deleteTodo } from '../redux/actions/index';\r\n// import Todo from './Todo';\r\n// import Tabs from './Tabs';\r\n// import TodoForm from './TodoForm'; // Import the TodoForm component\r\n\r\n// const Todos = () => {\r\n//   const dispatch = useDispatch();\r\n//   const todos = useSelector((state) => state.todos);\r\n//   const currentTab = useSelector((state) => state.currentTab);\r\n\r\n//   useEffect(() => {\r\n//     dispatch(getAllTodos());\r\n//   }, [dispatch]);\r\n\r\n//   const getTodos = () => {\r\n//     if (currentTab === 'All Todos') {\r\n//       return todos;\r\n//     } else if (currentTab === 'Active Todos') {\r\n//       return todos.filter((todo) => !todo.done);\r\n//     } else if (currentTab === 'Done Todos') {\r\n//       return todos.filter((todo) => todo.done);\r\n//     }\r\n//   };\r\n\r\n//   const removeDoneTodos = () => {\r\n//     todos.forEach(({ done, _id }) => {\r\n//       if (done) {\r\n//         dispatch(deleteTodo(_id));\r\n//       }\r\n//     });\r\n//   };\r\n\r\n//   return (\r\n//     <article>\r\n//       <div>\r\n//         <TodoForm /> {/* Include the TodoForm component here */}\r\n//         <Tabs currentTab={currentTab} />\r\n\r\n//         {todos.some((todo) => todo.done) ? (\r\n//           <button onClick={removeDoneTodos} className=\"button clear\">\r\n//             Remove Done Todos\r\n//           </button>\r\n//         ) : null}\r\n//       </div>\r\n\r\n//       <ul>\r\n//         {getTodos().map((todo) => (\r\n//           <Todo key={todo._id} todo={todo} />\r\n//         ))}\r\n//       </ul>\r\n//     </article>\r\n//   );\r\n// };\r\n\r\n// export default Todos;\r\n// import React, { useEffect } from 'react';\r\n// import { useDispatch, useSelector } from 'react-redux';\r\n// import { getAllTodos, deleteTodo } from '../redux/actions';\r\n// import Todo from './Todo';\r\n// import Tabs from './Tabs';\r\n// import TodoForm from './TodoForm';\r\n// import Header from './Header';\r\n\r\n\r\n// const Todos = () => {\r\n//   const dispatch = useDispatch();\r\n//   const todos = useSelector((state) => state.todos);\r\n//   const currentTab = useSelector((state) => state.currentTab);\r\n \r\n//   useEffect(() => {\r\n//     dispatch(getAllTodos());\r\n//   }, [dispatch]);\r\n\r\n//   const getTodos = () => {\r\n//     if (!todos) return []; // Handle the case when todos is undefined\r\n//     if (currentTab === 'All Todos') {\r\n//         console.log(currentTab);\r\n//       return todos;\r\n//     } else if (currentTab === 'Active Todos') {\r\n//       return todos.filter((todo) => !todo.done);\r\n//     } else if (currentTab === 'Done Todos') {\r\n//       return todos.filter((todo) => todo.done);\r\n//     } else {\r\n//       return []; // Handle the case when the currentTab is not recognized\r\n//     }\r\n  \r\n//   };\r\n\r\n//   const removeDoneTodos = () => {\r\n//     if (!todos) return; // Ensure todos is not undefined\r\n//     todos.forEach(({ done, _id }) => {\r\n//       if (done) {\r\n//         dispatch(deleteTodo(_id));\r\n//       }\r\n//     });\r\n//   };\r\n\r\n//   return (\r\n//     <article>\r\n//       <div>\r\n//         <Header/>\r\n//         <TodoForm/>\r\n       \r\n//         <Tabs currentTab={currentTab} />\r\n\r\n//         {todos && todos.some((todo) => todo.done) ? (\r\n//           <button onClick={removeDoneTodos} className=\"button clear\">\r\n//             Remove Done Todos\r\n//           </button>\r\n//         ) : null}\r\n        \r\n//       </div>\r\n\r\n//       <ul>\r\n        \r\n//         {getTodos().map((todo) => (\r\n//           <Todo key={todo._id} todo={todo} />\r\n//         ))}\r\n       \r\n//       </ul>\r\n//     </article>\r\n//   );\r\n// };\r\n\r\n// export default Todos;\r\n// import React, { useEffect } from 'react';\r\n// import { useSelector, useDispatch } from 'react-redux';\r\n// import { fetchTodos, setFilter } from '../redux/actions/index';\r\n// import Todo from './Todo';\r\n// import TodoForm from './TodoForm';\r\n// import Header from './Header';\r\n// import '../App.css';\r\n\r\n\r\n// const Todos = () => {\r\n//   const dispatch = useDispatch();\r\n//   const todos = useSelector((state) => state.todos); // Assuming your todos reducer stores the Todo items\r\n//  const completedTodos = useSelector((state) => state.completedTodos);\r\n//    const deletedTodos = useSelector((state) => state.deletedTodos);\r\n//   const filter = useSelector((state) => state.filter);\r\n//   useEffect(() => {\r\n//     // Fetch the Todo items when the component mounts\r\n//     dispatch(fetchTodos());\r\n    \r\n  \r\n//   }, [dispatch]);\r\n\r\n//   const handleFilter = (filter) => {\r\n//     dispatch(setFilter(filter));\r\n//   };\r\n//   const getFilteredTodos = () => {\r\n//     switch (filter) {\r\n//       case 'active':\r\n//         return todos.filter((todo) => !todo.done);\r\n//       case 'done':\r\n//         return todos.filter((todo) => todo.done);\r\n//       default:\r\n//         return todos;\r\n//     };\r\n//   if (!Array.isArray(todos)) {\r\n//     // Render the LoadingMessage component instead of the loading message\r\n//     return (console.log('hello world'))\r\n   \r\n//   }\r\n\r\n//   return (\r\n//     <>\r\n//      <Header/>\r\n//      <TodoForm/>\r\n//      <div>\r\n//         <button onClick={() => handleFilter('all')}>All Todos</button>\r\n//         <button onClick={() => handleFilter('active')}>Active Todos</button>\r\n//         <button onClick={() => handleFilter('done')}>Done Todos</button>\r\n//       </div>\r\n    \r\n//      <div>\r\n//       <h1>Todo List</h1>\r\n//       {todos.map((todo) => (\r\n//         <Todo key={todo.id} todo={todo} />\r\n//       ))}\r\n//         <ul>\r\n//         {getFilteredTodos().map((todo) => (\r\n//           <Todo key={todo.id} todo={todo} />\r\n//         ))}\r\n//       </ul>\r\n//     </div>\r\n//     </>\r\n\r\n    \r\n   \r\n  \r\n//   );\r\n// }}\r\n\r\n\r\n// export default Todos;\r\n\r\n// import React, { useEffect } from 'react';\r\n// import { useSelector, useDispatch } from 'react-redux';\r\n// import { fetchTodos, setFilter } from '../redux/actions/index';\r\n// import Todo from './Todo';\r\n// import TodoForm from './TodoForm';\r\n// import Header from './Header';\r\n// import '../App.css';\r\n\r\n// const Todos = () => {\r\n//   const dispatch = useDispatch();\r\n//   const todos = useSelector((state) => state.todos); // Assuming your todos reducer stores the Todo items\r\n//   // const completedTodos = useSelector((state) => state.completedTodos);\r\n//   // const deletedTodos = useSelector((state) => state.deletedTodos);\r\n//   const filter = useSelector((state) => state.filter);\r\n  \r\n//   useEffect(() => {\r\n//     // Fetch the Todo items when the component mounts\r\n//     dispatch(fetchTodos());\r\n//   }, [dispatch]);\r\n\r\n//   const handleFilter = (filter) => {\r\n//     dispatch(setFilter(filter));\r\n//   };\r\n\r\n//   const getFilteredTodos = () => {\r\n//     switch (filter) {\r\n//       case 'active':\r\n//         return todos.filter((todo) => !todo.done);\r\n//       case 'done':\r\n//         return todos.filter((todo) => todo.done);\r\n//       default:\r\n//         return todos;\r\n//     }\r\n//   };\r\n\r\n//   // Move this 'if' statement outside the getFilteredTodos function\r\n//   if (!Array.isArray(todos)) {\r\n//     // Render the LoadingMessage component instead of the loading message\r\n//     return console.log('hello world');\r\n//   }\r\n\r\n//   return (\r\n//     <>\r\n//       <Header />\r\n//       <TodoForm />\r\n//       <div>\r\n//         <button onClick={() => handleFilter('all')}>All Todos</button>\r\n//         <button onClick={() => handleFilter('active')}>Active Todos</button>\r\n//         <button onClick={() => handleFilter('done')}>Done Todos</button>\r\n//       </div>\r\n\r\n//       <div>\r\n//         <h1>Todo List</h1>\r\n//         {todos.map((todo) => (\r\n//           <Todo key={todo.id} todo={todo} />\r\n//         ))}\r\n//         <ul>\r\n//           {getFilteredTodos().map((todo) => (\r\n//             <Todo key={todo.id} todo={todo} />\r\n//           ))}\r\n//         </ul>\r\n//       </div>\r\n//     </>\r\n//   );\r\n// };\r\n\r\n// export default Todos;\r\n// import React, { useEffect } from 'react';\r\n// import { useSelector, useDispatch } from 'react-redux';\r\n// import { fetchTodos, setFilter, addNewTodo } from '../redux/actions/index';\r\n// import Todo from './Todo';\r\n// import TodoForm from './TodoForm';\r\n// import Header from './Header';\r\n// import '../App.css';\r\n\r\n// const Todos = () => {\r\n//   const dispatch = useDispatch();\r\n//   const todos = useSelector((state) => state.todos); // Assuming your todos reducer stores the Todo items\r\n//   const loading = useSelector((state) => state.loading); // Get the loading state from the Redux store\r\n\r\n//   const filter = useSelector((state) => state.filter);\r\n\r\n//   useEffect(() => {\r\n//     // Fetch the Todo items when the component mounts\r\n//     dispatch(fetchTodos());\r\n//   }, [dispatch]);\r\n\r\n//   const handleFilter = (filter) => {\r\n//     dispatch(setFilter(filter));\r\n//   };\r\n//   const handleAddNewTodo = (data) => {\r\n//     // Dispatch the addNewTodo action with the new todo data\r\n//     dispatch(addNewTodo(data));\r\n//   };\r\n\r\n\r\n//   const getFilteredTodos = () => {\r\n//     if (!todos) return [];\r\n//     switch (filter) {\r\n//       case 'active':\r\n//         const activeTodos = todos.filter((todo) => !todo.done);\r\n//         console.log('Active Todos:', activeTodos);\r\n//         return activeTodos;\r\n//       case 'done':\r\n//         const doneTodos = todos.filter((todo) => todo.done);\r\n//         console.log('Done Todos:', doneTodos);\r\n//         return doneTodos;\r\n//       default:\r\n//         return todos || [];\r\n//     }\r\n//   };\r\n//   const allTodosCount = todos.length;\r\n  \r\n//   // Handle the loading state\r\n//   if (loading) {\r\n//     return <div>Loading...</div>; // You can show a loading spinner or any other loading UI here\r\n//   }\r\n\r\n//   return (\r\n//     <>\r\n//       <Header />\r\n//       <TodoForm onAddNewTodo={handleAddNewTodo} />\r\n//       <div>\r\n//         <button onClick={() => handleFilter('all')}>All Todos({allTodosCount})</button>\r\n//         <button onClick={() => handleFilter('active')}>Active Todos</button>\r\n//         <button onClick={() => handleFilter('done')}>Done Todos</button>\r\n//       </div>\r\n\r\n//       <div>\r\n//         <h1>Todo List</h1>\r\n//         {/* Ensure getFilteredTodos() always returns an array before using map */}\r\n//         {Array.isArray(getFilteredTodos()) ? (\r\n//           getFilteredTodos().map((todo) => <Todo key={todo.id} todo={todo} />)\r\n//         ) : (\r\n//           <div>No todos to display.</div>\r\n//         )}\r\n//       </div>\r\n//     </>\r\n//   );\r\n// };\r\n\r\n\r\n\r\n// export default Todos;\r\nimport React, { useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { fetchTodos, addNewTodo } from '../redux/actions/index';\r\nimport Todo from './Todo';\r\nimport TodoForm from './TodoForm';\r\nimport Header from './Header';\r\nimport '../App.css';\r\nconst Todos = () => {\r\n  const dispatch = useDispatch();\r\n  const todos = useSelector((state) => state.todos || []); // Access the todos state from the Redux store\r\n  console.log('todos:', todos); \r\n  useEffect(() => {\r\n    // Fetch the Todo items when the component mounts\r\n    dispatch(fetchTodos());\r\n  }, [dispatch]);\r\n\r\n  const handleAddNewTodo = (data) => {\r\n    // Dispatch the addNewTodo action with the new todo data\r\n    dispatch(addNewTodo(data));\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Header/>\r\n      <TodoForm onAddNewTodo={handleAddNewTodo} />\r\n      <div>\r\n        <h1>Todo List</h1>\r\n        {todos.map((todo) => (\r\n          <Todo key={todo._id} todo={todo} />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Todos;"],"mappings":";;AAAA;;AAEA;AACA;;AAEA;;AAGA;AACA;AACA;;AAGA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAKA;AACA;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,SAASC,WAAW,EAAEC,WAAW,QAAQ,aAAa;AACtD,SAASC,UAAU,EAAEC,UAAU,QAAQ,wBAAwB;AAC/D,OAAOC,IAAI,MAAM,QAAQ;AACzB,OAAOC,QAAQ,MAAM,YAAY;AACjC,OAAOC,MAAM,MAAM,UAAU;AAC7B,OAAO,YAAY;AAAC,SAAAC,MAAA,IAAAC,OAAA;AACpB,MAAMC,KAAK,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAClB,MAAMC,QAAQ,GAAGV,WAAW,CAAC,CAAC;EAC9B,MAAMW,KAAK,GAAGZ,WAAW,CAAEa,KAAK,IAAKA,KAAK,CAACD,KAAK,IAAI,EAAE,CAAC,CAAC,CAAC;EACzDE,OAAO,CAACC,GAAG,CAAC,QAAQ,EAAEH,KAAK,CAAC;EAC5Bb,SAAS,CAAC,MAAM;IACd;IACAY,QAAQ,CAACT,UAAU,CAAC,CAAC,CAAC;EACxB,CAAC,EAAE,CAACS,QAAQ,CAAC,CAAC;EAEd,MAAMK,gBAAgB,GAAIC,IAAI,IAAK;IACjC;IACAN,QAAQ,CAACR,UAAU,CAACc,IAAI,CAAC,CAAC;EAC5B,CAAC;EAED,oBACET,OAAA;IAAAU,QAAA,gBACEV,OAAA,CAACF,MAAM;MAAAa,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC,eACTd,OAAA,CAACH,QAAQ;MAACkB,YAAY,EAAEP;IAAiB;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAC5Cd,OAAA;MAAAU,QAAA,gBACEV,OAAA;QAAAU,QAAA,EAAI;MAAS;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,EACjBV,KAAK,CAACY,GAAG,CAAEC,IAAI,iBACdjB,OAAA,CAACJ,IAAI;QAAgBqB,IAAI,EAAEA;MAAK,GAArBA,IAAI,CAACC,GAAG;QAAAP,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAe,CACnC,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAACZ,EAAA,CA1BID,KAAK;EAAA,QACQR,WAAW,EACdD,WAAW;AAAA;AAAA2B,EAAA,GAFrBlB,KAAK;AA4BX,eAAeA,KAAK;AAAC,IAAAkB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}