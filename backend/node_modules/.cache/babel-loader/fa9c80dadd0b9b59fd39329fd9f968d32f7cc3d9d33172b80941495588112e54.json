{"ast":null,"code":"// import { createStore, combineReducers, applyMiddleware } from 'redux';\n// import thunk from 'redux-thunk';\n// import { composeWithDevTools } from 'redux-devtools-extension';\n\n// import { todosReducers } from './reducers/todosReducer';\n// import { tabReducer } from './reducers/tabReducer';\n\n// const reducer = combineReducers({\n//     todos: todosReducers,\n//     currentTab: tabReducer\n// })\n\n// const middleware = [thunk];\n\n// const store = createStore(\n//     reducer,\n//     composeWithDevTools(applyMiddleware(...middleware))\n// )\n\n// export default store;\nimport { createStore, combineReducers, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { todosReducers } from './reducers/todosReducer';\nimport { tabReducer } from './reducers/tabReducer';\nimport authReducer from './reducers/authReducer';\nconst rootReducer = combineReducers({\n  auth: authReducer\n});\nconst reducer = combineReducers({\n  todos: todosReducers,\n  currentTab: tabReducer\n});\nconst middleware = [thunk];\n\n// Use two separate stores for different reducers, if needed\nconst authStore = createStore(rootReducer, applyMiddleware(thunk));\nconst appStore = createStore(reducer, composeWithDevTools(applyMiddleware(...middleware)));\nexport { authStore, appStore };","map":{"version":3,"names":["createStore","combineReducers","applyMiddleware","thunk","composeWithDevTools","todosReducers","tabReducer","authReducer","rootReducer","auth","reducer","todos","currentTab","middleware","authStore","appStore"],"sources":["C:/Users/acer/Desktop/MERN_Todolist/forntend/src/redux/store.js"],"sourcesContent":["// import { createStore, combineReducers, applyMiddleware } from 'redux';\r\n// import thunk from 'redux-thunk';\r\n// import { composeWithDevTools } from 'redux-devtools-extension';\r\n\r\n// import { todosReducers } from './reducers/todosReducer';\r\n// import { tabReducer } from './reducers/tabReducer';\r\n\r\n// const reducer = combineReducers({\r\n//     todos: todosReducers,\r\n//     currentTab: tabReducer\r\n// })\r\n\r\n\r\n// const middleware = [thunk];\r\n\r\n// const store = createStore(\r\n//     reducer,\r\n//     composeWithDevTools(applyMiddleware(...middleware))\r\n// )\r\n\r\n// export default store;\r\nimport { createStore, combineReducers, applyMiddleware } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\n\r\nimport { todosReducers } from './reducers/todosReducer';\r\nimport { tabReducer } from './reducers/tabReducer';\r\nimport authReducer from './reducers/authReducer';\r\n\r\nconst rootReducer = combineReducers({\r\n  auth: authReducer,\r\n});\r\n\r\nconst reducer = combineReducers({\r\n  todos: todosReducers,\r\n  currentTab: tabReducer,\r\n});\r\n\r\nconst middleware = [thunk];\r\n\r\n// Use two separate stores for different reducers, if needed\r\nconst authStore = createStore(rootReducer, applyMiddleware(thunk));\r\nconst appStore = createStore(reducer, composeWithDevTools(applyMiddleware(...middleware)));\r\n\r\nexport { authStore, appStore };\r\n"],"mappings":"AAAA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAGA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,SAASA,WAAW,EAAEC,eAAe,EAAEC,eAAe,QAAQ,OAAO;AACrE,OAAOC,KAAK,MAAM,aAAa;AAC/B,SAASC,mBAAmB,QAAQ,0BAA0B;AAE9D,SAASC,aAAa,QAAQ,yBAAyB;AACvD,SAASC,UAAU,QAAQ,uBAAuB;AAClD,OAAOC,WAAW,MAAM,wBAAwB;AAEhD,MAAMC,WAAW,GAAGP,eAAe,CAAC;EAClCQ,IAAI,EAAEF;AACR,CAAC,CAAC;AAEF,MAAMG,OAAO,GAAGT,eAAe,CAAC;EAC9BU,KAAK,EAAEN,aAAa;EACpBO,UAAU,EAAEN;AACd,CAAC,CAAC;AAEF,MAAMO,UAAU,GAAG,CAACV,KAAK,CAAC;;AAE1B;AACA,MAAMW,SAAS,GAAGd,WAAW,CAACQ,WAAW,EAAEN,eAAe,CAACC,KAAK,CAAC,CAAC;AAClE,MAAMY,QAAQ,GAAGf,WAAW,CAACU,OAAO,EAAEN,mBAAmB,CAACF,eAAe,CAAC,GAAGW,UAAU,CAAC,CAAC,CAAC;AAE1F,SAASC,SAAS,EAAEC,QAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}